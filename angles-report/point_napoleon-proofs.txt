[["point_napoleon.v", "point_napoleon.", " \nLemma colineaire_sym : forall u v : V, colineaire u v -> colineaire v u.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : colineaire u v), colineaire v u"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : colineaire u v), colineaire v u"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma colineaire_modulo_pi :\n forall u v u' v' : V,\n colineaire u u' ->\n colineaire v v' -> R (double (cons u' v')) (double (cons u v)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v u' v' : V) (_ : colineaire u u') (_ : colineaire v v'),\nR (double (cons u' v')) (double (cons u v))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v u' v' : V) (_ : colineaire u u') (_ : colineaire v v'),\nR (double (cons u' v')) (double (cons u v))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : orthogonal u v), orthogonal u (opp v)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : orthogonal u v), orthogonal u (opp v)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma colineaire_transitive :\n forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v w : V) (_ : colineaire u v) (_ : colineaire v w),\ncolineaire u w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v w : V) (_ : colineaire u v) (_ : colineaire v w),\ncolineaire u w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma critere_orthogonal_reciproque :\n forall u v : V, orthogonal u v -> R (cons u v) (cons v (opp u)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : orthogonal u v), R (cons u v) (cons v (opp u))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : orthogonal u v), R (cons u v) (cons v (opp u))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma bissectrice_double :\n forall I A B C : PO,\n bissectrice I A B C ->\n R (double (cons (vec A I) (vec A C))) (cons (vec A B) (vec A C)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : bissectrice I A B C),\nR (double (cons (vec A I) (vec A C))) (cons (vec A B) (vec A C))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : bissectrice I A B C),\nR (double (cons (vec A I) (vec A C))) (cons (vec A B) (vec A C))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma orthogonal_colineaire :\n forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v w : V) (_ : orthogonal u v) (_ : colineaire v w),\northogonal u w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v w : V) (_ : orthogonal u v) (_ : colineaire v w),\northogonal u w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma critere_orthogonal :\n forall u v : V, R (cons u v) (cons v (opp u)) -> orthogonal u v.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : R (cons u v) (cons v (opp u))), orthogonal u v"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : R (cons u v) (cons v (opp u))), orthogonal u v"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma double_orthogonal :\n forall u u' v v' : V,\n orthogonal u u' ->\n orthogonal v v' -> R (double (cons u v)) (double (cons u' v')).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u u' v v' : V) (_ : orthogonal u u') (_ : orthogonal v v'),\nR (double (cons u v)) (double (cons u' v'))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u u' v v' : V) (_ : orthogonal u u') (_ : orthogonal v v'),\nR (double (cons u v)) (double (cons u' v'))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma orthogonal_bissectrice :\n forall u v : V, orthogonal u v -> R (cons (opp v) u) (cons u v).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : orthogonal u v), R (cons (opp v) u) (cons u v)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v : V) (_ : orthogonal u v), R (cons (opp v) u) (cons u v)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma bissectrice_hauteur_isocele :\n forall I A B C : PO,\n bissectrice I A B C -> orthogonal (vec A I) (vec B C) -> isocele A B C.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : bissectrice I A B C)\n  (_ : orthogonal (vec A I) (vec B C)), isocele A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : bissectrice I A B C)\n  (_ : orthogonal (vec A I) (vec B C)), isocele A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma isocele_hauteur_bissectrice :\n forall I A B C : PO,\n isocele A B C -> orthogonal (vec A I) (vec B C) -> bissectrice I A B C.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : isocele A B C)\n  (_ : orthogonal (vec A I) (vec B C)), bissectrice I A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : isocele A B C)\n  (_ : orthogonal (vec A I) (vec B C)), bissectrice I A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma bissectrice_deux_isoceles :\n forall I A B C D : PO,\n bissectrice I A B C ->\n isocele A B C ->\n isocele D B C -> R (cons (vec D B) (vec A I)) (cons (vec A I) (vec D C)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C D : PO) (_ : bissectrice I A B C) \n  (_ : isocele A B C) (_ : isocele D B C),\nR (cons (vec D B) (vec A I)) (cons (vec A I) (vec D C))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C D : PO) (_ : bissectrice I A B C) \n  (_ : isocele A B C) (_ : isocele D B C),\nR (cons (vec D B) (vec A I)) (cons (vec A I) (vec D C))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma bissectrice_droite :\n forall u v w t : V,\n R (cons v u) (cons u w) -> colineaire u t -> R (cons v t) (cons t w).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v w t : V) (_ : R (cons v u) (cons u w)) (_ : colineaire u t),\nR (cons v t) (cons t w)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (u v w t : V) (_ : R (cons v u) (cons u w)) (_ : colineaire u t),\nR (cons v t) (cons t w)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma isocele_bissectrice_hauteur :\n forall I A B C : PO,\n bissectrice I A B C -> isocele A B C -> orthogonal (vec A I) (vec B C).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : bissectrice I A B C) (_ : isocele A B C),\northogonal (vec A I) (vec B C)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : bissectrice I A B C) (_ : isocele A B C),\northogonal (vec A I) (vec B C)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma bissectrice_direction :\n forall (I A B C : PO) (u : V),\n bissectrice I A B C ->\n R (cons (vec A B) u) (cons u (vec A C)) -> colineaire (vec A I) u.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (u : V) (_ : bissectrice I A B C)\n  (_ : R (cons (vec A B) u) (cons u (vec A C))), colineaire (vec A I) u"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (u : V) (_ : bissectrice I A B C)\n  (_ : R (cons (vec A B) u) (cons u (vec A C))), colineaire (vec A I) u"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma bissectrice_unicite :\n forall I A B C J : PO,\n bissectrice I A B C -> bissectrice J A B C -> colineaire (vec A I) (vec A J).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C J : PO) (_ : bissectrice I A B C)\n  (_ : bissectrice J A B C), colineaire (vec A I) (vec A J)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C J : PO) (_ : bissectrice I A B C)\n  (_ : bissectrice J A B C), colineaire (vec A I) (vec A J)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma milieu_isocele :\n forall I A B C : PO, isocele A B C -> milieu I B C -> bissectrice I A B C.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : isocele A B C) (_ : milieu I B C),\nbissectrice I A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "unfold milieu.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : isocele A B C) (_ : milieu I B C),\nbissectrice I A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (I A B C : PO) (_ : isocele A B C)\n  (_ : and (colineaire (vec B I) (vec B C))\n         (forall (A0 : PO) (_ : isocele A0 B C), bissectrice I A0 B C)),\nbissectrice I A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "apply H0.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : and (colineaire (vec B I) (vec B C))\n  (forall (A : PO) (_ : isocele A B C), bissectrice I A B C)", "H : isocele A B C", "I,A,B,C : PO"], "goal": "bissectrice I A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : and (colineaire (vec B I) (vec B C))\n  (forall (A : PO) (_ : isocele A B C), bissectrice I A B C)", "H : isocele A B C", "I,A,B,C : PO"], "goal": "isocele A B C"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma existence_mediatrice_base_isocele :\n forall A B C D : PO,\n isocele A B C -> isocele D B C -> bissectrice D A B C /\\ bissectrice A D B C.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : isocele A B C) (_ : isocele D B C),\nand (bissectrice D A B C) (bissectrice A D B C)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : isocele A B C) (_ : isocele D B C),\nand (bissectrice D A B C) (bissectrice A D B C)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma concours_3circonscrits :\n forall A B C P Q T O1 O2 I : PO,\n circonscrit T A B O1 ->\n circonscrit I A B O1 ->\n circonscrit Q A C O2 ->\n circonscrit I A C O2 ->\n ~ colineaire (vec P B) (vec P C) ->\n R\n   (plus (cons (vec P C) (vec P B))\n      (plus (cons (vec T B) (vec T A)) (cons (vec Q A) (vec Q C)))) pi ->\n sont_cocycliques P B C I.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C P Q T O1 O2 I : PO) (_ : circonscrit T A B O1)\n  (_ : circonscrit I A B O1) (_ : circonscrit Q A C O2)\n  (_ : circonscrit I A C O2) (_ : not (colineaire (vec P B) (vec P C)))\n  (_ : R\n         (plus (cons (vec P C) (vec P B))\n            (plus (cons (vec T B) (vec T A)) (cons (vec Q A) (vec Q C))))\n         pi), sont_cocycliques P B C I"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C P Q T O1 O2 I : PO) (_ : circonscrit T A B O1)\n  (_ : circonscrit I A B O1) (_ : circonscrit Q A C O2)\n  (_ : circonscrit I A C O2) (_ : not (colineaire (vec P B) (vec P C)))\n  (_ : R\n         (plus (cons (vec P C) (vec P B))\n            (plus (cons (vec T B) (vec T A)) (cons (vec Q A) (vec Q C))))\n         pi), sont_cocycliques P B C I"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nTheorem general_Napoleon :\n forall A B C P0 Q T O1 O2 I : PO,\n circonscrit T A B O1 ->\n circonscrit I A B O1 ->\n circonscrit Q A C O2 ->\n circonscrit I A C O2 ->\n ~ colineaire (vec P0 B) (vec P0 C) ->\n R\n   (plus (cons (vec P0 C) (vec P0 B))\n      (plus (cons (vec T B) (vec T A)) (cons (vec Q A) (vec Q C)))) pi ->\n exists O3 : PO,\n   R (double (cons (vec O1 O2) (vec O1 O3)))\n     (double (cons (vec T A) (vec T B))) /\\\n   R (double (cons (vec O1 O3) (vec O2 O3)))\n     (double (cons (vec P0 B) (vec P0 C))) /\\\n   R (double (cons (vec O1 O2) (vec O2 O3)))\n     (double (cons (vec Q A) (vec Q C))).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C P0 Q T O1 O2 I : PO) (_ : circonscrit T A B O1)\n  (_ : circonscrit I A B O1) (_ : circonscrit Q A C O2)\n  (_ : circonscrit I A C O2)\n  (_ : not (colineaire (vec P0 B) (vec P0 C)))\n  (_ : R\n         (plus (cons (vec P0 C) (vec P0 B))\n            (plus (cons (vec T B) (vec T A)) (cons (vec Q A) (vec Q C))))\n         pi),\nex\n  (fun O3 : PO =>\n   and\n     (R (double (cons (vec O1 O2) (vec O1 O3)))\n        (double (cons (vec T A) (vec T B))))\n     (and\n        (R (double (cons (vec O1 O3) (vec O2 O3)))\n           (double (cons (vec P0 B) (vec P0 C))))\n        (R (double (cons (vec O1 O2) (vec O2 O3)))\n           (double (cons (vec Q A) (vec Q C))))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C P0 Q T O1 O2 I : PO) (_ : circonscrit T A B O1)\n  (_ : circonscrit I A B O1) (_ : circonscrit Q A C O2)\n  (_ : circonscrit I A C O2)\n  (_ : not (colineaire (vec P0 B) (vec P0 C)))\n  (_ : R\n         (plus (cons (vec P0 C) (vec P0 B))\n            (plus (cons (vec T B) (vec T A)) (cons (vec Q A) (vec Q C))))\n         pi),\nex\n  (fun O3 : PO =>\n   and\n     (R (double (cons (vec O1 O2) (vec O1 O3)))\n        (double (cons (vec T A) (vec T B))))\n     (and\n        (R (double (cons (vec O1 O3) (vec O2 O3)))\n           (double (cons (vec P0 B) (vec P0 C))))\n        (R (double (cons (vec O1 O2) (vec O2 O3)))\n           (double (cons (vec Q A) (vec Q C))))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_napoleon.v", "point_napoleon.", " \nLemma circonscrit_3centres :\n forall A B C O1 O2 O3 I : PO,\n circonscrit I A B O1 ->\n circonscrit I A C O2 ->\n circonscrit I B C O3 ->\n R (double (cons (vec O1 O2) (vec O1 O3)))\n   (double (cons (vec I A) (vec I B))) /\\\n R (double (cons (vec O1 O3) (vec O2 O3)))\n   (double (cons (vec I B) (vec I C))) /\\\n R (double (cons (vec O1 O2) (vec O2 O3)))\n   (double (cons (vec I A) (vec I C))).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C O1 O2 O3 I : PO) (_ : circonscrit I A B O1)\n  (_ : circonscrit I A C O2) (_ : circonscrit I B C O3),\nand\n  (R (double (cons (vec O1 O2) (vec O1 O3)))\n     (double (cons (vec I A) (vec I B))))\n  (and\n     (R (double (cons (vec O1 O3) (vec O2 O3)))\n        (double (cons (vec I B) (vec I C))))\n     (R (double (cons (vec O1 O2) (vec O2 O3)))\n        (double (cons (vec I A) (vec I C)))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C O1 O2 O3 I : PO) (_ : circonscrit I A B O1)\n  (_ : circonscrit I A C O2) (_ : circonscrit I B C O3),\nand\n  (R (double (cons (vec O1 O2) (vec O1 O3)))\n     (double (cons (vec I A) (vec I B))))\n  (and\n     (R (double (cons (vec O1 O3) (vec O2 O3)))\n        (double (cons (vec I B) (vec I C))))\n     (R (double (cons (vec O1 O2) (vec O2 O3)))\n        (double (cons (vec I A) (vec I C)))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
