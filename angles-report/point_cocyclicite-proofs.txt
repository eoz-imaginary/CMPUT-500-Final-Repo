[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma calcul4 :\n forall a b c d : AV,\n R (plus (plus a b) (plus c d)) (plus (plus a c) (plus b d)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a b c d : AV,\nR (plus (plus a b) (plus c d)) (plus (plus a c) (plus b d))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a b c d : AV,\nR (plus (plus a b) (plus c d)) (plus (plus a c) (plus b d))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nTheorem cocyclique :\n forall M A B O M' : PO,\n isocele O A B ->\n isocele O M A ->\n isocele O M B ->\n isocele O M' A ->\n isocele O M' B ->\n R (double (cons (vec M' A) (vec M' B))) (double (cons (vec M A) (vec M B))).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (M A B O M' : PO) (_ : isocele O A B) (_ : isocele O M A)\n  (_ : isocele O M B) (_ : isocele O M' A) (_ : isocele O M' B),\nR (double (cons (vec M' A) (vec M' B)))\n  (double (cons (vec M A) (vec M B)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (M A B O M' : PO) (_ : isocele O A B) (_ : isocele O M A)\n  (_ : isocele O M B) (_ : isocele O M' A) (_ : isocele O M' B),\nR (double (cons (vec M' A) (vec M' B)))\n  (double (cons (vec M A) (vec M B)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma triangle_rectangle :\n forall A B M O : PO,\n isocele O M A ->\n isocele O M B ->\n orthogonal (vec M A) (vec M B) -> R (cons (vec O A) (vec O B)) pi.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B M O : PO) (_ : isocele O M A) (_ : isocele O M B)\n  (_ : orthogonal (vec M A) (vec M B)), R (cons (vec O A) (vec O B)) pi"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B M O : PO) (_ : isocele O M A) (_ : isocele O M B)\n  (_ : orthogonal (vec M A) (vec M B)), R (cons (vec O A) (vec O B)) pi"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma triangle_diametre :\n forall A B M O : PO,\n isocele O M A ->\n isocele O M B ->\n R (cons (vec O A) (vec O B)) pi -> orthogonal (vec M A) (vec M B).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B M O : PO) (_ : isocele O M A) (_ : isocele O M B)\n  (_ : R (cons (vec O A) (vec O B)) pi), orthogonal (vec M A) (vec M B)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B M O : PO) (_ : isocele O M A) (_ : isocele O M B)\n  (_ : R (cons (vec O A) (vec O B)) pi), orthogonal (vec M A) (vec M B)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma exists_opp_angle : forall a : AV, exists b : AV, R (plus a b) zero.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a : AV, ex (fun b : AV => R (plus a b) zero)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a : AV, ex (fun b : AV => R (plus a b) zero)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nTheorem angle_inscrit :\n forall A B M O : PO,\n isocele O M A ->\n isocele O M B ->\n R (double (cons (vec M A) (vec M B))) (cons (vec O A) (vec O B)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B M O : PO) (_ : isocele O M A) (_ : isocele O M B),\nR (double (cons (vec M A) (vec M B))) (cons (vec O A) (vec O B))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B M O : PO) (_ : isocele O M A) (_ : isocele O M B),\nR (double (cons (vec M A) (vec M B))) (cons (vec O A) (vec O B))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma abba : forall A B : PO, R (cons (vec A B) (vec B A)) pi.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall A B : PO, R (cons (vec A B) (vec B A)) pi"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall A B : PO, R (cons (vec A B) (vec B A)) pi"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma calcul5 :\n forall a b c d : AV,\n R (plus (plus a (plus b c)) (plus d d))\n   (plus a (plus (plus d b) (plus d c))).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a b c d : AV,\nR (plus (plus a (plus b c)) (plus d d))\n  (plus a (plus (plus d b) (plus d c)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a b c d : AV,\nR (plus (plus a (plus b c)) (plus d d))\n  (plus a (plus (plus d b) (plus d c)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma construction_orthogonal : forall u : V, exists v : V, orthogonal v u.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall u : V, ex (fun v : V => orthogonal v u)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall u : V, ex (fun v : V => orthogonal v u)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma construction_isocele_base :\n forall (A B : PO) (a : AV),\n exists u : V,\n   (exists v : V,\n      R (cons (vec A B) u) (cons v (vec B A)) /\\ R (cons u v) (double a)).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B : PO) (a : AV),\nex\n  (fun u : V =>\n   ex\n     (fun v : V =>\n      and (R (cons (vec A B) u) (cons v (vec B A)))\n        (R (cons u v) (double a))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B : PO) (a : AV),\nex\n  (fun u : V =>\n   ex\n     (fun v : V =>\n      and (R (cons (vec A B) u) (cons v (vec B A)))\n        (R (cons u v) (double a))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma isocele_sym : forall A B C : PO, isocele A B C -> isocele A C B.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C : PO) (_ : isocele A B C), isocele A C B"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C : PO) (_ : isocele A B C), isocele A C B"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "red.", "context_before": {"fg_goals": [{"hypotheses": ["H : isocele A B C", "A,B,C : PO"], "goal": "isocele A C B"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : isocele A B C", "A,B,C : PO"], "goal": "R (cons (vec C B) (vec C A)) (cons (vec B A) (vec B C))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma construction_circonscrit_vecteur :\n forall M A B : PO,\n ex\n   (fun u : V =>\n    ex\n      (fun v : V =>\n       ex\n         (fun w : V =>\n          (R (cons u v) (double (cons (vec M A) (vec M B))) /\\\n           R (cons u w) (double (cons (vec B A) (vec B M))) /\\\n           R (cons v w) (double (cons (vec A B) (vec A M)))) /\\\n          R (cons (vec A B) u) (cons v (vec B A)) /\\\n          R (cons w (vec M B)) (cons (vec B M) v) /\\\n          R (cons (vec M A) w) (cons u (vec A M))))).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall M A B : PO,\nex\n  (fun u : V =>\n   ex\n     (fun v : V =>\n      ex\n        (fun w : V =>\n         and\n           (and (R (cons u v) (double (cons (vec M A) (vec M B))))\n              (and (R (cons u w) (double (cons (vec B A) (vec B M))))\n                 (R (cons v w) (double (cons (vec A B) (vec A M))))))\n           (and (R (cons (vec A B) u) (cons v (vec B A)))\n              (and (R (cons w (vec M B)) (cons (vec B M) v))\n                 (R (cons (vec M A) w) (cons u (vec A M))))))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall M A B : PO,\nex\n  (fun u : V =>\n   ex\n     (fun v : V =>\n      ex\n        (fun w : V =>\n         and\n           (and (R (cons u v) (double (cons (vec M A) (vec M B))))\n              (and (R (cons u w) (double (cons (vec B A) (vec B M))))\n                 (R (cons v w) (double (cons (vec A B) (vec A M))))))\n           (and (R (cons (vec A B) u) (cons v (vec B A)))\n              (and (R (cons w (vec M B)) (cons (vec B M) v))\n                 (R (cons (vec M A) w) (cons u (vec A M))))))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma changement_base_cocyclique :\n forall A B C D : PO,\n ~ colineaire (vec C A) (vec C B) ->\n R (double (cons (vec C A) (vec C B))) (double (cons (vec D A) (vec D B))) ->\n R (double (cons (vec A C) (vec A D))) (double (cons (vec B C) (vec B D))).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : not (colineaire (vec C A) (vec C B)))\n  (_ : R (double (cons (vec C A) (vec C B)))\n         (double (cons (vec D A) (vec D B)))),\nR (double (cons (vec A C) (vec A D)))\n  (double (cons (vec B C) (vec B D)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : not (colineaire (vec C A) (vec C B)))\n  (_ : R (double (cons (vec C A) (vec C B)))\n         (double (cons (vec D A) (vec D B)))),\nR (double (cons (vec A C) (vec A D)))\n  (double (cons (vec B C) (vec B D)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma changement_base_cocyclique_2 :\n forall A B C D : PO,\n ~ colineaire (vec C A) (vec C B) ->\n R (double (cons (vec C A) (vec C B))) (double (cons (vec D A) (vec D B))) ->\n R (double (cons (vec B C) (vec B A))) (double (cons (vec D C) (vec D A))).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : not (colineaire (vec C A) (vec C B)))\n  (_ : R (double (cons (vec C A) (vec C B)))\n         (double (cons (vec D A) (vec D B)))),\nR (double (cons (vec B C) (vec B A)))\n  (double (cons (vec D C) (vec D A)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : not (colineaire (vec C A) (vec C B)))\n  (_ : R (double (cons (vec C A) (vec C B)))\n         (double (cons (vec D A) (vec D B)))),\nR (double (cons (vec B C) (vec B A)))\n  (double (cons (vec D C) (vec D A)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma unicite_circonscrit :\n forall M A B O O' : PO,\n isocele O A B ->\n isocele O M B ->\n isocele O M A ->\n isocele O' A B ->\n isocele O' M B ->\n isocele O' M A ->\n (colineaire (vec O A) (vec O' A) /\\ colineaire (vec O B) (vec O' B)) /\\\n colineaire (vec O M) (vec O' M).\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (M A B O O' : PO) (_ : isocele O A B) (_ : isocele O M B)\n  (_ : isocele O M A) (_ : isocele O' A B) (_ : isocele O' M B)\n  (_ : isocele O' M A),\nand\n  (and (colineaire (vec O A) (vec O' A))\n     (colineaire (vec O B) (vec O' B)))\n  (colineaire (vec O M) (vec O' M))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (M A B O O' : PO) (_ : isocele O A B) (_ : isocele O M B)\n  (_ : isocele O M A) (_ : isocele O' A B) (_ : isocele O' M B)\n  (_ : isocele O' M A),\nand\n  (and (colineaire (vec O A) (vec O' A))\n     (colineaire (vec O B) (vec O' B)))\n  (colineaire (vec O M) (vec O' M))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nLemma deux_rectangles :\n forall A B C D : PO,\n orthogonal (vec C A) (vec C B) ->\n orthogonal (vec D A) (vec D B) ->\n R (double (cons (vec B C) (vec B A))) (double (cons (vec D C) (vec D A))).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : orthogonal (vec C A) (vec C B))\n  (_ : orthogonal (vec D A) (vec D B)),\nR (double (cons (vec B C) (vec B A)))\n  (double (cons (vec D C) (vec D A)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (A B C D : PO) (_ : orthogonal (vec C A) (vec C B))\n  (_ : orthogonal (vec D A) (vec D B)),\nR (double (cons (vec B C) (vec B A)))\n  (double (cons (vec D C) (vec D A)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["point_cocyclicite.v", "point_cocyclicite.", " \nTheorem reciproque_cocyclique :\n forall M A B M' : PO,\n ~ colineaire (vec M A) (vec M B) ->\n R (double (cons (vec M' A) (vec M' B))) (double (cons (vec M A) (vec M B))) ->\n sont_cocycliques M A B M'.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (M A B M' : PO) (_ : not (colineaire (vec M A) (vec M B)))\n  (_ : R (double (cons (vec M' A) (vec M' B)))\n         (double (cons (vec M A) (vec M B)))),\nsont_cocycliques M A B M'"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (M A B M' : PO) (_ : not (colineaire (vec M A) (vec M B)))\n  (_ : R (double (cons (vec M' A) (vec M' B)))\n         (double (cons (vec M A) (vec M B)))),\nsont_cocycliques M A B M'"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
