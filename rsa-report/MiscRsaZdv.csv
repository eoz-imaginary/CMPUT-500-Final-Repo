# prelude: .
# output_dir: search-report-compcert
# verbose: 0
# progress: True
# read_progress: False
# hardfail: False
# context_filter: None
# weightsfile: /home/zoe/Desktop/proverbot9001/bench/../data/polyarg-weights-compcert.dat
# predictor: None
# truncate_semicolons: True
# search_width: 5
# max_attempts: 10
# search_depth: 6
# hard_depth_limit: 200
# resume: True
# overwrite_mismatch: False
# max_print_term: None
# max_print_hyps: None
# max_print_subgoals: 2
# max_proof_time: 300
# max_tactic_time: 2
# linearize: False
# proof_times: None
# filenames: [PosixPath2('Fermat.v'), PosixPath2('Binomials.v'), PosixPath2('Rsa.v'), PosixPath2('MiscRsa.v'), PosixPath2('Divides.v')]
# use_hammer: False
# check_consistent: True
# show_failing_predictions: False
# count_failing_predictions: False
# count_softfail_predictions: False
# careful: False
# relevant_lemmas: local
# command_limit: None
# proof: None
# log_anomalies: None
# log_hard_anomalies: None
# num_threads: 4
"Theorem lt_mult_right : forall x y z t : nat, x < z -> y < t -> x * y < z * t.",INCOMPLETE,29
"Theorem le_mult_right : forall x y : nat, 0 < y -> x <= x * y.",INCOMPLETE,9
"Lemma power_SO : forall x : nat, power 1 x = 1.",INCOMPLETE,10
"Lemma power_lt_O : forall x n : nat, 0 < x -> 0 < power x n.",INCOMPLETE,16
"Lemma power_le : forall x n : nat, 0 < n -> x <= power x n.",SUCCESS,20
"Lemma power_mult :
 forall x a b : nat, power x a * power x b = power x (a + b).",INCOMPLETE,11
"Lemma power_power : forall x a b : nat, power (power x a) b = power x (a * b).",INCOMPLETE,16
"Lemma SO_power : forall x : nat, power 1 x = 1.",SUCCESS,10
"Lemma power_O : forall n : nat, 1 <= n -> power 0 n = 0.",SUCCESS,10
"Lemma lt_minus_O_lt : forall n m : nat, m < n -> 0 < n - m.",SUCCESS,9
"Lemma eq_minus : forall a b c : nat, c < a -> a - c = b - c -> a = b.",SUCCESS,15
"Lemma eq_minus' :
 forall a b c : nat, c <= a -> c <= b -> a - c = b - c -> a = b.",SUCCESS,10
"Lemma eq_plus : forall a b c : nat, c + a = c + b -> a = b.",SUCCESS,5
"Lemma plus_eqO : forall x y : nat, x + y = 0 -> x = 0.",SUCCESS,16
"Lemma mult_eqO : forall a b : nat, a * b = 0 -> a = 0 \/ b = 0.",SUCCESS,16
"Lemma mult_SO : forall x y : nat, x * y = 1 -> x = 1.",SUCCESS,28
"Lemma mult_eq_Sn : forall a b : nat, 0 < b -> a * b = b -> a = 1.",INCOMPLETE,32
"Lemma div_x_nO : forall x y q r : nat, is_div x y q r -> y <> 0.",SUCCESS,11
"Lemma div_x_O_r : forall x q r : nat, is_div 0 x q r -> r = 0.",INCOMPLETE,7
"Lemma div_x_O_q : forall x q r : nat, is_div 0 x q r -> q = 0.",INCOMPLETE,20
"Lemma div_pred :
 forall x y q : nat,
 0 < x -> is_div x y q 0 -> is_div (pred x) y (pred q) (pred y).",INCOMPLETE,34
"Lemma div_SxS :
 forall x y q r : nat,
 0 < r -> is_div x y q r -> is_div (pred x) y q (pred r).",INCOMPLETE,27
"Lemma div_unic_r :
 forall a b q1 q2 r1 r2 : nat,
 is_div a b q1 r1 -> is_div a b q2 r2 -> r1 = r2.",INCOMPLETE,77
"Theorem simpl_mult_r : forall n m p : nat, 0 < n -> m * n = p * n -> m = p.",SUCCESS,41
"Lemma div_unic_q :
 forall a b q1 q2 r1 r2 : nat,
 is_div a b q1 r1 -> is_div a b q2 r2 -> q1 = q2.",INCOMPLETE,24
"Lemma quot_eq :
 forall a b c q1 r1 q2 r2 : nat,
 a = b -> is_div a c q1 r1 -> is_div b c q2 r2 -> q1 = q2.",INCOMPLETE,5
"Lemma mult_div_r : forall x y q r : nat, is_div (x * y) y q r -> r = 0.",INCOMPLETE,13
"Lemma mult_div_q : forall x y q r : nat, is_div (x * y) y q r -> q = x.",INCOMPLETE,14
"Lemma diveucl_divex :
 forall a b : nat,
 diveucl a b -> exists q : _, (exists r : _, is_div a b q r).",INCOMPLETE,10
"Lemma div_ex :
 forall a b : nat, b <> 0 -> exists q : _, (exists r : _, is_div a b q r).",INCOMPLETE,9
"Lemma eq_mult : forall a b c : nat, c <> 0 -> c * a = c * b -> a = b.",INCOMPLETE,15
"Lemma le_plus_le : forall a b c d : nat, a <= b -> a + c = b + d -> d <= c.",SUCCESS,13
