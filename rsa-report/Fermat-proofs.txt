[["Fermat.v", "Fermat.", "\nLemma Fermat2 : forall x p : nat, prime p -> congruent p (power x p) x.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x p : nat) (_ : prime p), congruent p (power x p) x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x p : nat) (_ : prime p), congruent p (power x p) x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Fermat.v", "Fermat.", "\nLemma Fermat1 :\n forall x p : nat, prime p -> congruent p (power (x + 1) p) (power x p + 1).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x p : nat) (_ : prime p),\ncongruent p (power (Init.Nat.add x (S O)) p)\n  (Init.Nat.add (power x p) (S O))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x p : nat) (_ : prime p),\ncongruent p (power (Init.Nat.add x (S O)) p)\n  (Init.Nat.add (power x p) (S O))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Fermat.v", "Fermat.", "\nTheorem Fermat :\n forall x p : nat,\n prime p -> ~ divides p x -> congruent p (power x (p - 1)) 1.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x p : nat) (_ : prime p) (_ : not (divides p x)),\ncongruent p (power x (Init.Nat.sub p (S O))) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x p : nat) (_ : prime p) (_ : not (divides p x)),\ncongruent p (power x (Init.Nat.sub p (S O))) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Fermat.v", "Fermat.", "\nLemma p_div_bin :\n forall k p : nat, prime p -> 0 < k -> k < p -> divides p (binomial p k).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (k p : nat) (_ : prime p) (_ : lt O k) (_ : lt k p),\ndivides p (binomial p k)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (k p : nat) (_ : prime p) (_ : lt O k) (_ : lt k p),\ndivides p (binomial p k)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Fermat.v", "Fermat.", "\nLemma div_fact :\n forall p k : nat,\n prime p ->\n 0 < k ->\n divides p (factorial k) -> exists j : nat, 0 < j /\\ j <= k /\\ divides p j.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (p k : nat) (_ : prime p) (_ : lt O k)\n  (_ : divides p (factorial k)),\nex (fun j : nat => and (lt O j) (and (le j k) (divides p j)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (p k : nat) (_ : prime p) (_ : lt O k)\n  (_ : divides p (factorial k)),\nex (fun j : nat => and (lt O j) (and (le j k) (divides p j)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
