[["Rsa.v", "Rsa.", "\nLemma gcd_pq_SO : is_gcd p q 1.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "is_gcd p q (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "is_gcd p q (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Rsa.v", "Rsa.", "\nLemma prime_2_or_more : forall r : nat, prime r -> r = 2 \\/ 2 < r.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall (r : nat) (_ : prime r), or (eq r (S (S O))) (lt (S (S O)) r)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall (r : nat) (_ : prime r), or (eq r (S (S O))) (lt (S (S O)) r)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Rsa.v", "Rsa.", "\nLemma phi_gt_SO : 1 < pq.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "lt (S O) pq"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "lt (S O) pq"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Rsa.v", "Rsa.", "\nTheorem rsa_correct :\n forall w : nat, congruent (p * q) (decrypt (encrypt w)) w.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall w : nat, congruent (Init.Nat.mul p q) (decrypt (encrypt w)) w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall w : nat, congruent (Init.Nat.mul p q) (decrypt (encrypt w)) w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Rsa.v", "Rsa.", "\nTheorem rsa_correct' :\n forall w : nat, congruent (p * q) (decrypt d (encrypt e w)) w.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent (Init.Nat.mul (Init.Nat.sub p (S O)) (Init.Nat.sub q (S O)))\n  (Init.Nat.mul e d) (S O)", "e,d : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall w : nat,\ncongruent (Init.Nat.mul p q) (decrypt d (encrypt e w)) w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent (Init.Nat.mul (Init.Nat.sub p (S O)) (Init.Nat.sub q (S O)))\n  (Init.Nat.mul e d) (S O)", "e,d : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall w : nat,\ncongruent (Init.Nat.mul p q) (decrypt d (encrypt e w)) w"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Rsa.v", "Rsa.", "\nLemma Chinese :\n forall a b : nat,\n b <= a -> congruent p a b -> congruent q a b -> congruent (p * q) a b.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall (a b : nat) (_ : le b a) (_ : congruent p a b)\n  (_ : congruent q a b), congruent (Init.Nat.mul p q) a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": ["ed_inv : congruent pq (Init.Nat.mul e d) (S O)", "pq_div_q : divides (Init.Nat.sub q (S O)) pq", "pq_div_p : divides (Init.Nat.sub p (S O)) pq", "pqnot_zero : not (eq pq O)", "e,d,pq : nat", "neq_pq : not (eq p q)", "prime_q : prime q", "prime_p : prime p", "p,q : nat"], "goal": "forall (a b : nat) (_ : le b a) (_ : congruent p a b)\n  (_ : congruent q a b), congruent (Init.Nat.mul p q) a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
