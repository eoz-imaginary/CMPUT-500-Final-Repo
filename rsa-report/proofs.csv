lemma,status,prooflength
# prelude: .
# output_dir: search-report-compcert
# verbose: 0
# progress: True
# read_progress: False
# hardfail: False
# context_filter: None
# weightsfile: /home/zoe/Desktop/proverbot9001/bench/../data/polyarg-weights-compcert.dat
# predictor: None
# truncate_semicolons: True
# search_width: 5
# max_attempts: 10
# search_depth: 6
# hard_depth_limit: 200
# resume: True
# overwrite_mismatch: False
# max_print_term: None
# max_print_hyps: None
# max_print_subgoals: 2
# max_proof_time: 300
# max_tactic_time: 2
# linearize: False
# proof_times: None
# filenames: [PosixPath2('Fermat.v'), PosixPath2('Binomials.v'), PosixPath2('Rsa.v'), PosixPath2('MiscRsa.v'), PosixPath2('Divides.v')]
# use_hammer: False
# check_consistent: True
# show_failing_predictions: False
# count_failing_predictions: False
# count_softfail_predictions: False
# careful: False
# relevant_lemmas: local
# command_limit: None
# proof: None
# log_anomalies: None
# log_hard_anomalies: None
# num_threads: 4
"Lemma div_fact :
 forall p k : nat,
 prime p ->
 0 < k ->
 divides p (factorial k) -> exists j : nat, 0 < j /\ j <= k /\ divides p j.",INCOMPLETE,50
"Lemma p_div_bin :
 forall k p : nat, prime p -> 0 < k -> k < p -> divides p (binomial p k).",INCOMPLETE,87
"Lemma Fermat1 :
 forall x p : nat, prime p -> congruent p (power (x + 1) p) (power x p + 1).",INCOMPLETE,64
"Lemma Fermat2 : forall x p : nat, prime p -> congruent p (power x p) x.",INCOMPLETE,36
# prelude: .
# output_dir: search-report-compcert
# verbose: 0
# progress: True
# read_progress: False
# hardfail: False
# context_filter: None
# weightsfile: /home/zoe/Desktop/proverbot9001/bench/../data/polyarg-weights-compcert.dat
# predictor: None
# truncate_semicolons: True
# search_width: 5
# max_attempts: 10
# search_depth: 6
# hard_depth_limit: 200
# resume: True
# overwrite_mismatch: False
# max_print_term: None
# max_print_hyps: None
# max_print_subgoals: 2
# max_proof_time: 300
# max_tactic_time: 2
# linearize: False
# proof_times: None
# filenames: [PosixPath2('Fermat.v'), PosixPath2('Binomials.v'), PosixPath2('Rsa.v'), PosixPath2('MiscRsa.v'), PosixPath2('Divides.v')]
# use_hammer: False
# check_consistent: True
# show_failing_predictions: False
# count_failing_predictions: False
# count_softfail_predictions: False
# careful: False
# relevant_lemmas: local
# command_limit: None
# proof: None
# log_anomalies: None
# log_hard_anomalies: None
# num_threads: 4
"Lemma sum_nm_i :
 forall (m n : nat) (f : nat -> nat),
 sum_nm (S n) m f = f m + sum_nm n (S m) f.",SUCCESS,2
"Lemma sum_nm_f :
 forall (m n : nat) (f : nat -> nat),
 sum_nm (S n) m f = sum_nm n m f + f (m + S n).",INCOMPLETE,14
"Lemma sum_nm_ext :
 forall (m n : nat) (f g : nat -> nat),
 (forall x : nat, x <= n -> f (m + x) = g (m + x)) ->
 sum_nm n m f = sum_nm n m g.",INCOMPLETE,24
"Lemma sum_nm_add :
 forall (m n : nat) (f g : nat -> nat),
 sum_nm n m f + sum_nm n m g = sum_nm n m (fun i : nat => f i + g i).",INCOMPLETE,19
"Lemma sum_nm_times :
 forall (m n x : nat) (f : nat -> nat),
 x * sum_nm n m f = sum_nm n m (fun i : nat => x * f i).",INCOMPLETE,15
"Lemma inv_sum_nm :
 forall (P : nat -> Prop) (i n : nat) (f : nat -> nat),
 (forall a b : nat, P a -> P b -> P (a + b)) ->
 (forall x : nat, x <= n -> P (f (i + x))) -> P (sum_nm n i f).",INCOMPLETE,26
"Lemma t_sum_Svars :
 forall (n k : nat) (f : nat -> nat),
 sum_nm k n f = sum_nm k (S n) (fun i : nat => f (pred i)).",INCOMPLETE,11
"Lemma binomial_def1 : forall n : nat, binomial n 0 = 1.",SUCCESS,5
"Lemma binomial_def2 : forall n m : nat, n < m -> binomial n m = 0.",INCOMPLETE,29
"Lemma binomial_def3 : forall n : nat, binomial n n = 1.",INCOMPLETE,12
"Lemma binomial_def4 :
 forall n k : nat,
 k < n -> binomial (S n) (S k) = binomial n (S k) + binomial n k.",SUCCESS,4
"Lemma binomial_fact :
 forall m n : nat,
 binomial (n + m) n * (factorial n * factorial m) = factorial (n + m).",INCOMPLETE,22
# prelude: .
# output_dir: search-report-compcert
# verbose: 0
# progress: True
# read_progress: False
# hardfail: False
# context_filter: None
# weightsfile: /home/zoe/Desktop/proverbot9001/bench/../data/polyarg-weights-compcert.dat
# predictor: None
# truncate_semicolons: True
# search_width: 5
# max_attempts: 10
# search_depth: 6
# hard_depth_limit: 200
# resume: True
# overwrite_mismatch: False
# max_print_term: None
# max_print_hyps: None
# max_print_subgoals: 2
# max_proof_time: 300
# max_tactic_time: 2
# linearize: False
# proof_times: None
# filenames: [PosixPath2('Fermat.v'), PosixPath2('Binomials.v'), PosixPath2('Rsa.v'), PosixPath2('MiscRsa.v'), PosixPath2('Divides.v')]
# use_hammer: False
# check_consistent: True
# show_failing_predictions: False
# count_failing_predictions: False
# count_softfail_predictions: False
# careful: False
# relevant_lemmas: local
# command_limit: None
# proof: None
# log_anomalies: None
# log_hard_anomalies: None
# num_threads: 4
Lemma gcd_pq_SO : is_gcd p q 1.,INCOMPLETE,14
"Lemma Chinese :
 forall a b : nat,
 b <= a -> congruent p a b -> congruent q a b -> congruent (p * q) a b.",INCOMPLETE,34
"Lemma prime_2_or_more : forall r : nat, prime r -> r = 2 \/ 2 < r.",INCOMPLETE,17
Lemma phi_gt_SO : 1 < pq.,INCOMPLETE,59
"Theorem rsa_correct :
 forall w : nat, congruent (p * q) (decrypt (encrypt w)) w.",INCOMPLETE,121
"Theorem rsa_correct' :
 forall w : nat, congruent (p * q) (decrypt d (encrypt e w)) w.",INCOMPLETE,81
# prelude: .
# output_dir: search-report-compcert
# verbose: 0
# progress: True
# read_progress: False
# hardfail: False
# context_filter: None
# weightsfile: /home/zoe/Desktop/proverbot9001/bench/../data/polyarg-weights-compcert.dat
# predictor: None
# truncate_semicolons: True
# search_width: 5
# max_attempts: 10
# search_depth: 6
# hard_depth_limit: 200
# resume: True
# overwrite_mismatch: False
# max_print_term: None
# max_print_hyps: None
# max_print_subgoals: 2
# max_proof_time: 300
# max_tactic_time: 2
# linearize: False
# proof_times: None
# filenames: [PosixPath2('Fermat.v'), PosixPath2('Binomials.v'), PosixPath2('Rsa.v'), PosixPath2('MiscRsa.v'), PosixPath2('Divides.v')]
# use_hammer: False
# check_consistent: True
# show_failing_predictions: False
# count_failing_predictions: False
# count_softfail_predictions: False
# careful: False
# relevant_lemmas: local
# command_limit: None
# proof: None
# log_anomalies: None
# log_hard_anomalies: None
# num_threads: 4
"Theorem lt_mult_right : forall x y z t : nat, x < z -> y < t -> x * y < z * t.",INCOMPLETE,29
"Theorem le_mult_right : forall x y : nat, 0 < y -> x <= x * y.",INCOMPLETE,9
"Lemma power_SO : forall x : nat, power 1 x = 1.",INCOMPLETE,10
"Lemma power_lt_O : forall x n : nat, 0 < x -> 0 < power x n.",INCOMPLETE,16
"Lemma power_le : forall x n : nat, 0 < n -> x <= power x n.",SUCCESS,20
"Lemma power_mult :
 forall x a b : nat, power x a * power x b = power x (a + b).",INCOMPLETE,11
"Lemma power_power : forall x a b : nat, power (power x a) b = power x (a * b).",INCOMPLETE,16
"Lemma SO_power : forall x : nat, power 1 x = 1.",SUCCESS,10
"Lemma power_O : forall n : nat, 1 <= n -> power 0 n = 0.",SUCCESS,10
"Lemma lt_minus_O_lt : forall n m : nat, m < n -> 0 < n - m.",SUCCESS,9
"Lemma eq_minus : forall a b c : nat, c < a -> a - c = b - c -> a = b.",SUCCESS,15
"Lemma eq_minus' :
 forall a b c : nat, c <= a -> c <= b -> a - c = b - c -> a = b.",SUCCESS,10
"Lemma eq_plus : forall a b c : nat, c + a = c + b -> a = b.",SUCCESS,5
"Lemma plus_eqO : forall x y : nat, x + y = 0 -> x = 0.",SUCCESS,16
"Lemma mult_eqO : forall a b : nat, a * b = 0 -> a = 0 \/ b = 0.",SUCCESS,16
"Lemma mult_SO : forall x y : nat, x * y = 1 -> x = 1.",SUCCESS,28
"Lemma mult_eq_Sn : forall a b : nat, 0 < b -> a * b = b -> a = 1.",INCOMPLETE,32
"Lemma div_x_nO : forall x y q r : nat, is_div x y q r -> y <> 0.",SUCCESS,11
"Lemma div_x_O_r : forall x q r : nat, is_div 0 x q r -> r = 0.",INCOMPLETE,7
"Lemma div_x_O_q : forall x q r : nat, is_div 0 x q r -> q = 0.",INCOMPLETE,20
"Lemma div_pred :
 forall x y q : nat,
 0 < x -> is_div x y q 0 -> is_div (pred x) y (pred q) (pred y).",INCOMPLETE,34
"Lemma div_SxS :
 forall x y q r : nat,
 0 < r -> is_div x y q r -> is_div (pred x) y q (pred r).",INCOMPLETE,27
"Lemma div_unic_r :
 forall a b q1 q2 r1 r2 : nat,
 is_div a b q1 r1 -> is_div a b q2 r2 -> r1 = r2.",INCOMPLETE,77
"Theorem simpl_mult_r : forall n m p : nat, 0 < n -> m * n = p * n -> m = p.",SUCCESS,41
"Lemma div_unic_q :
 forall a b q1 q2 r1 r2 : nat,
 is_div a b q1 r1 -> is_div a b q2 r2 -> q1 = q2.",INCOMPLETE,24
"Lemma quot_eq :
 forall a b c q1 r1 q2 r2 : nat,
 a = b -> is_div a c q1 r1 -> is_div b c q2 r2 -> q1 = q2.",INCOMPLETE,5
"Lemma mult_div_r : forall x y q r : nat, is_div (x * y) y q r -> r = 0.",INCOMPLETE,13
"Lemma mult_div_q : forall x y q r : nat, is_div (x * y) y q r -> q = x.",INCOMPLETE,14
"Lemma diveucl_divex :
 forall a b : nat,
 diveucl a b -> exists q : _, (exists r : _, is_div a b q r).",INCOMPLETE,10
"Lemma div_ex :
 forall a b : nat, b <> 0 -> exists q : _, (exists r : _, is_div a b q r).",INCOMPLETE,9
"Lemma eq_mult : forall a b c : nat, c <> 0 -> c * a = c * b -> a = b.",INCOMPLETE,15
"Lemma le_plus_le : forall a b c d : nat, a <= b -> a + c = b + d -> d <= c.",SUCCESS,13
# prelude: .
# output_dir: search-report-compcert
# verbose: 0
# progress: True
# read_progress: False
# hardfail: False
# context_filter: None
# weightsfile: /home/zoe/Desktop/proverbot9001/bench/../data/polyarg-weights-compcert.dat
# predictor: None
# truncate_semicolons: True
# search_width: 5
# max_attempts: 10
# search_depth: 6
# hard_depth_limit: 200
# resume: True
# overwrite_mismatch: False
# max_print_term: None
# max_print_hyps: None
# max_print_subgoals: 2
# max_proof_time: 300
# max_tactic_time: 2
# linearize: False
# proof_times: None
# filenames: [PosixPath2('Fermat.v'), PosixPath2('Binomials.v'), PosixPath2('Rsa.v'), PosixPath2('MiscRsa.v'), PosixPath2('Divides.v')]
# use_hammer: False
# check_consistent: True
# show_failing_predictions: False
# count_failing_predictions: False
# count_softfail_predictions: False
# careful: False
# relevant_lemmas: local
# command_limit: None
# proof: None
# log_anomalies: None
# log_hard_anomalies: None
# num_threads: 4
"Lemma div_ref : forall a : nat, divides a a.",INCOMPLETE,4
"Lemma div_divides :
 forall x y : nat, (exists q : _, is_div x y q 0) -> divides y x.",INCOMPLETE,11
"Lemma divides_div :
 forall x y : nat, 0 < y -> divides y x -> exists q : _, is_div x y q 0.",SUCCESS,11
"Lemma divides_dec' :
 forall x y : nat,
 {(exists q : _, is_div x y q 0)} + {~ (exists q : _, is_div x y q 0)}.",INCOMPLETE,44
"Lemma divides_dec : forall x y : nat, {divides x y} + {~ divides x y}.",INCOMPLETE,45
"Lemma all_divides_O : forall n : nat, divides n 0.",INCOMPLETE,5
"Lemma SO_divides_all : forall n : nat, divides 1 n.",INCOMPLETE,5
"Lemma divides_plus1 :
 forall a b c : nat, divides a b -> divides a c -> divides a (b + c).",INCOMPLETE,10
"Lemma divides_plus2 :
 forall a b c : nat, divides a b -> divides a (b + c) -> divides a c.",INCOMPLETE,11
"Theorem divides_le : forall a b : nat, b <> 0 -> divides a b -> a <= b.",SUCCESS,17
"Lemma divides_antisym : forall a b : nat, divides a b -> divides b a -> a = b.",INCOMPLETE,26
"Lemma not_lt_div : forall a b : nat, 0 < b -> b < a -> ~ divides a b.",INCOMPLETE,12
Lemma not_prime_O : ~ prime 0.,INCOMPLETE,13
Lemma not_prime_1 : ~ prime 1.,SUCCESS,6
"Lemma lt_prime : forall p : nat, prime p -> 1 < p.",INCOMPLETE,16
"Lemma is_gcd_unic :
 forall a b c d : nat, is_gcd a b c -> is_gcd a b d -> c = d.",INCOMPLETE,8
"Lemma is_gcd_ref : forall x : nat, is_gcd x x x.",SUCCESS,7
"Lemma is_gcd_sym : forall a b c : nat, is_gcd a b c -> is_gcd b a c.",SUCCESS,8
"Lemma is_gcd_O' : forall a r : nat, is_gcd a 0 r -> a = r.",INCOMPLETE,7
"Lemma is_gcd_Ol : forall a : nat, is_gcd a 0 a.",SUCCESS,6
"Lemma is_gcd_Or : forall a : nat, is_gcd 0 a a.",SUCCESS,6
"Lemma prime_gcd : forall p n : nat, prime p -> ~ divides p n -> is_gcd n p 1.",INCOMPLETE,27
"Lemma gcd_rec :
 forall P : nat -> nat -> Set,
 (forall x : nat, P 0 x) ->
 (forall x : nat, P x 0) ->
 (forall a b : nat, P a b -> P a (b + a)) ->
 (forall a b : nat, P a b -> P (a + b) b) -> forall a b : nat, P a b.",FAILURE,18
"Lemma gcd_ind :
 forall P : nat -> nat -> Prop,
 (forall x : nat, P 0 x) ->
 (forall x : nat, P x 0) ->
 (forall a b : nat, P a b -> P a (b + a)) ->
 (forall a b : nat, P a b -> P (a + b) b) -> forall a b : nat, P a b.",FAILURE,18
"Theorem gcd_inv_Or_aux : forall a b c : nat, gcd_spec a b c -> b = 0 -> a = c.",INCOMPLETE,18
"Theorem gcd_inv_Or : forall a b : nat, gcd_spec a 0 b -> a = b.",SUCCESS,5
"Theorem gcd_inv_Ol_aux : forall a b c : nat, gcd_spec a b c -> a = 0 -> b = c.",INCOMPLETE,18
"Theorem gcd_inv_Ol : forall a b : nat, gcd_spec 0 a b -> a = b.",INCOMPLETE,5
"Lemma gcd_ex : forall a b : nat, {r : nat | gcd_spec a b r}.",INCOMPLETE,53
"Lemma gcd_correct : forall a b : nat, gcd_spec a b (gcd a b).",INCOMPLETE,7
"Lemma gcd_spec_uniq :
 forall a b r1 r2 : nat, gcd_spec a b r1 -> gcd_spec a b r2 -> r1 = r2.",INCOMPLETE,54
"Lemma gcd_correct2 : forall a b r : nat, gcd_spec a b r -> gcd a b = r.",SUCCESS,6
"Lemma gcd_def0l : forall x : nat, gcd 0 x = x.",INCOMPLETE,6
"Lemma gcd_def0r : forall x : nat, gcd x 0 = x.",INCOMPLETE,6
"Lemma gcd_def1 : forall x : nat, gcd x x = x.",INCOMPLETE,11
"Lemma gcd_def2 : forall a b : nat, gcd a b = gcd a (b + a).",INCOMPLETE,27
"Lemma gcd_def3 : forall a b : nat, gcd a b = gcd (a + b) b.",INCOMPLETE,24
"Lemma gcd_is_gcd : forall a b : nat, is_gcd a b (gcd a b).",INCOMPLETE,55
"Lemma preEuclid :
 forall a b c m : nat,
 divides c (m * a) -> divides c (m * b) -> divides c (m * gcd a b).",INCOMPLETE,47
"Theorem L_Euclides :
 forall x a b : nat, is_gcd x a 1 -> divides x (a * b) -> divides x b.",INCOMPLETE,16
"Lemma L_Euclides1 :
 forall p a b : nat,
 prime p -> divides p (a * b) -> ~ divides p a -> divides p b.",INCOMPLETE,9
"Lemma L_Euclides2 :
 forall p a b : nat,
 prime p -> divides p (a * b) -> divides p a \/ divides p b.",INCOMPLETE,11
"Theorem div_power_prime :
 forall p w n : nat, prime p -> divides p (power w n) -> divides p w.",INCOMPLETE,50
"Lemma cong_ref : forall a : nat, congruent a a.",SUCCESS,5
"Lemma cong_sym : forall a b : nat, congruent a b -> congruent b a.",SUCCESS,7
"Lemma cong_trans :
 forall a b c : nat, congruent a b -> congruent b c -> congruent a c.",INCOMPLETE,14
"Lemma cong_mult_O : forall a b : nat, congruent a 0 -> congruent (a * b) 0.",INCOMPLETE,13
"Lemma cong_plus :
 forall a b c d : nat,
 congruent a b -> congruent c d -> congruent (a + c) (b + d).",INCOMPLETE,18
"Lemma cong_add :
 forall a b c : nat, congruent a b -> congruent (a + c) (b + c).",SUCCESS,10
"Lemma cong_times :
 forall a b c : nat, congruent a b -> congruent (a * c) (b * c).",INCOMPLETE,11
"Lemma cong_mult :
 forall a b c d : nat,
 congruent a b -> congruent c d -> congruent (a * c) (b * d).",INCOMPLETE,36
"Lemma cong_pow :
 forall a b c : nat, congruent a b -> congruent (power a c) (power b c).",SUCCESS,13
"Theorem congruent' :
 forall a b : nat, b <= a -> congruent a b -> exists k : nat, a = k * n + b.",INCOMPLETE,14
"Lemma cong1_le : forall x : nat, 1 < n -> congruent x 1 -> 1 <= x.",INCOMPLETE,26
"Lemma divides_cong : forall x : nat, divides n x -> congruent 0 x.",INCOMPLETE,8
"Theorem cong_divides :
 forall a b : nat, b <= a -> congruent a b -> divides n (a - b).",INCOMPLETE,13
