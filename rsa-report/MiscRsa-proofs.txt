[["MiscRsa.v", "MiscRsa.", " \nLemma power_SO : forall x : nat, power 1 x = 1.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : nat, eq (power (S O) x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : nat, eq (power (S O) x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nTheorem le_mult_right : forall x y : nat, 0 < y -> x <= x * y.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y : nat) (_ : lt O y), le x (Init.Nat.mul x y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y : nat) (_ : lt O y), le x (Init.Nat.mul x y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", "(***********************************************************************\n  **********************************************************************\n  **********************************************************************\n  Some Arith Facts.*)\n \nTheorem lt_mult_right : forall x y z t : nat, x < z -> y < t -> x * y < z * t.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y z t : nat) (_ : lt x z) (_ : lt y t),\nlt (Init.Nat.mul x y) (Init.Nat.mul z t)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y z t : nat) (_ : lt x z) (_ : lt y t),\nlt (Init.Nat.mul x y) (Init.Nat.mul z t)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma power_lt_O : forall x n : nat, 0 < x -> 0 < power x n.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x n : nat) (_ : lt O x), lt O (power x n)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x n : nat) (_ : lt O x), lt O (power x n)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma SO_power : forall x : nat, power 1 x = 1.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : nat, eq (power (S O) x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : nat, eq (power (S O) x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "apply power_SO.", "context_before": {"fg_goals": [{"hypotheses": ["x : nat"], "goal": "eq (power (S O) x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma power_O : forall n : nat, 1 <= n -> power 0 n = 0.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n : nat) (_ : le (S O) n), eq (power O n) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n : nat) (_ : le (S O) n), eq (power O n) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct n.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S O) n", "n : nat"], "goal": "eq (power O n) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S O) O"], "goal": "eq (power O O) O"}], "bg_goals": [{"hypotheses": ["H : le (S O) (S n)", "n : nat"], "goal": "eq (power O (S n)) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S O) O"], "goal": "eq (S O) O"}], "bg_goals": [{"hypotheses": ["H : le (S O) (S n)", "n : nat"], "goal": "eq (power O (S n)) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S O) (S n)", "n : nat"], "goal": "eq (power O (S n)) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma lt_minus_O_lt : forall n m : nat, m < n -> 0 < n - m.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n m : nat) (_ : lt m n), lt O (Init.Nat.sub n m)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n m : nat) (_ : lt m n), lt O (Init.Nat.sub n m)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt m n", "n,m : nat"], "goal": "lt O (Init.Nat.sub n m)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma eq_minus : forall a b c : nat, c < a -> a - c = b - c -> a = b.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction a.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (b c : nat) (_ : lt c O)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : lt c (S a))\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (b c : nat) (_ : lt c O) (_ : eq O (Init.Nat.sub b c)), eq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : lt c (S a))\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "rewrite H0.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq O (Init.Nat.sub b c)", "H : lt c O", "b,c : nat"], "goal": "eq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : lt c (S a))\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq O (Init.Nat.sub b c)", "H : lt c O", "b,c : nat"], "goal": "eq (Init.Nat.sub b c) b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : lt c (S a))\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : lt c (S a))\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub b c)), eq (S a) b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub O c)), eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub (S b) c)), eq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end O), eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub (S b) c)), eq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt O (S a)) (_ : eq (S a) O), eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub (S b) c)), eq (S a) (S b)"}, {"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt (S c) (S a)) (_ : eq (Init.Nat.sub a c) O), eq (S a) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt (S c) (S a)) (_ : eq (Init.Nat.sub a c) O), eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub (S b) c)), eq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (c : nat) (_ : lt c (S a))\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end (Init.Nat.sub (S b) c)), eq (S a) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt O (S a)) (_ : eq (S a) (Init.Nat.sub (S b) O)),\neq (S a) (S b)"}], "bg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt (S c) (S a))\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub (S b) (S c))),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq (S a) (Init.Nat.sub (S b) O)", "H : lt O (S a)", "b : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "eq (S a) (S b)"}], "bg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt (S c) (S a))\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub (S b) (S c))),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : lt c a)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (_ : lt (S c) (S a))\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub (S b) (S c))),\neq (S a) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma power_le : forall x n : nat, 0 < n -> x <= power x n.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x n : nat) (_ : lt O n), le x (power x n)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction n.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x n : nat) (_ : lt O n), le x (power x n)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["x : nat"], "goal": "forall _ : lt O O, le x (power x O)"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le x (power x n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le x (power x (S n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt O O", "x : nat"], "goal": "le x (power x O)"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le x (power x n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le x (power x (S n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try omega.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt O O"], "goal": "le O (power O O)"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le x (power x n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le x (power x (S n))"}, {"hypotheses": ["H : lt O O", "x : nat"], "goal": "le (S x) (power (S x) O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt O O", "x : nat"], "goal": "le (S x) (power (S x) O)"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le x (power x n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le x (power x (S n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try omega.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt O O", "x : nat"], "goal": "le (S x) (S O)"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le x (power x n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le x (power x (S n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le x (power x n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le x (power x (S n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le O (power O n)", "n : nat"], "goal": "forall _ : lt O (S n), le O (power O (S n))"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le (S x) (power (S x) n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le (S x) (power (S x) (S n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt O (S n)", "IHn : forall _ : lt O n, le O (power O n)", "n : nat"], "goal": "le O (power O (S n))"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le (S x) (power (S x) n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le (S x) (power (S x) (S n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct n.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O n, le (S x) (power (S x) n)", "x,n : nat"], "goal": "forall _ : lt O (S n), le (S x) (power (S x) (S n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O O, le (S x) (power (S x) O)", "x : nat"], "goal": "forall _ : lt O (S O), le (S x) (power (S x) (S O))"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O (S n), le (S x) (power (S x) (S n))", "x,n : nat"], "goal": "forall _ : lt O (S (S n)), le (S x) (power (S x) (S (S n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O O, le (S x) (power (S x) O)", "x : nat"], "goal": "forall _ : lt O (S O), le (S x) (S (Init.Nat.mul x (S O)))"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O (S n), le (S x) (power (S x) (S n))", "x,n : nat"], "goal": "forall _ : lt O (S (S n)), le (S x) (power (S x) (S (S n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try omega.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt O (S O)", "IHn : forall _ : lt O O, le (S x) (power (S x) O)", "x : nat"], "goal": "le (S x) (S (Init.Nat.mul x (S O)))"}], "bg_goals": [{"hypotheses": ["IHn : forall _ : lt O (S n), le (S x) (power (S x) (S n))", "x,n : nat"], "goal": "forall _ : lt O (S (S n)), le (S x) (power (S x) (S (S n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O (S n), le (S x) (power (S x) (S n))", "x,n : nat"], "goal": "forall _ : lt O (S (S n)), le (S x) (power (S x) (S (S n)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall _ : lt O (S n), le (S x) (power (S x) (S n))", "x,n : nat"], "goal": "forall _ : lt O (S (S n)),\nle (S x)\n  (Init.Nat.add\n     (Init.Nat.add (power (S x) n) (Init.Nat.mul x (power (S x) n)))\n     (Init.Nat.mul x\n        (Init.Nat.add (power (S x) n) (Init.Nat.mul x (power (S x) n)))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma eq_plus : forall a b c : nat, c + a = c + b -> a = b.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction a.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c b)),\neq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c O)), eq O O"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S b))),\neq O (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add c O) (Init.Nat.add c O)", "c : nat"], "goal": "eq O O"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S b))),\neq O (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S b))),\neq O (S b)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try destruct c.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S O))),\neq O (S O)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S (S b)))),\neq O (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall _ : eq (Init.Nat.add O O) (Init.Nat.add O (S O)), eq O (S O)"}], "bg_goals": [{"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S (S b)))),\neq O (S (S b))"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["c : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) O) (Init.Nat.add (S c) (S O)),\neq O (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add O O) (Init.Nat.add O (S O))"], "goal": "eq O (S O)"}], "bg_goals": [{"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S (S b)))),\neq O (S (S b))"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["c : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) O) (Init.Nat.add (S c) (S O)),\neq O (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["c : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) O) (Init.Nat.add (S c) (S O)),\neq O (S O)"}], "bg_goals": [{"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S (S b)))),\neq O (S (S b))"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["c : nat"], "goal": "forall _ : eq (S (Init.Nat.add c O)) (S (Init.Nat.add c (S O))),\neq O (S O)"}], "bg_goals": [{"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S (S b)))),\neq O (S (S b))"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c O) (Init.Nat.add c (S (S b)))),\neq O (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat"], "goal": "forall _ : eq (Init.Nat.add O O) (Init.Nat.add O (S (S b))),\neq O (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["b,c : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) O) (Init.Nat.add (S c) (S (S b))),\neq O (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add O O) (Init.Nat.add O (S (S b)))", "b : nat"], "goal": "eq O (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["b,c : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) O) (Init.Nat.add (S c) (S (S b))),\neq O (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) O) (Init.Nat.add (S c) (S (S b))),\neq O (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat"], "goal": "forall _ : eq (Init.Nat.add (S O) O) (Init.Nat.add (S O) (S (S b))),\neq O (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}, {"hypotheses": ["b,c : nat"], "goal": "forall\n  _ : eq (Init.Nat.add (S (S c)) O) (Init.Nat.add (S (S c)) (S (S b))),\neq O (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat"], "goal": "forall\n  _ : eq (Init.Nat.add (S (S c)) O) (Init.Nat.add (S (S c)) (S (S b))),\neq O (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c b)),\neq (S a) b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c O)),\neq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c (S b))),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add c (S a)) (Init.Nat.add c O)", "c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c (S b))),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try discriminate.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add O (S a)) (Init.Nat.add O O)", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c (S b))),\neq (S a) (S b)"}, {"hypotheses": ["H : eq (Init.Nat.add (S c) (S a)) (Init.Nat.add (S c) O)", "c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "eq (S a) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add (S c) (S a)) (Init.Nat.add (S c) O)", "c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "eq (S a) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c (S b))),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall (c : nat) (_ : eq (Init.Nat.add c (S a)) (Init.Nat.add c (S b))),\neq (S a) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall _ : eq (Init.Nat.add O (S a)) (Init.Nat.add O (S b)),\neq (S a) (S b)"}], "bg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) (S a)) (Init.Nat.add (S c) (S b)),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add O (S a)) (Init.Nat.add O (S b))", "b : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "eq (S a) (S b)"}], "bg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) (S a)) (Init.Nat.add (S c) (S b)),\neq (S a) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall _ : eq (Init.Nat.add (S c) (S a)) (Init.Nat.add (S c) (S b)),\neq (S a) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : eq (Init.Nat.add c a) (Init.Nat.add c b)),\neq a b", "a : nat"], "goal": "forall _ : eq (S (Init.Nat.add c (S a))) (S (Init.Nat.add c (S b))),\neq (S a) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma plus_eqO : forall x y : nat, x + y = 0 -> x = 0.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y : nat) (_ : eq (Init.Nat.add x y) O), eq x O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y : nat) (_ : eq (Init.Nat.add x y) O), eq x O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add x y) O", "x,y : nat"], "goal": "eq x O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add O y) O", "y : nat"], "goal": "eq O O"}], "bg_goals": [{"hypotheses": ["H : eq (Init.Nat.add (S x) y) O", "x,y : nat"], "goal": "eq (S x) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.add (S x) y) O", "x,y : nat"], "goal": "eq (S x) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma power_power : forall x a b : nat, power (power x a) b = power x (a * b).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x a b : nat,\neq (power (power x a) b) (power x (Init.Nat.mul a b))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x a b : nat,\neq (power (power x a) b) (power x (Init.Nat.mul a b))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma mult_eqO : forall a b : nat, a * b = 0 -> a = 0 \\/ b = 0.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : eq (Init.Nat.mul a b) O), or (eq a O) (eq b O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : eq (Init.Nat.mul a b) O), or (eq a O) (eq b O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct a.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul a b) O", "a,b : nat"], "goal": "or (eq a O) (eq b O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul O b) O", "b : nat"], "goal": "or (eq O O) (eq b O)"}], "bg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul (S a) b) O", "a,b : nat"], "goal": "or (eq (S a) O) (eq b O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "right.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul (S a) b) O", "a,b : nat"], "goal": "or (eq (S a) O) (eq b O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul (S a) b) O", "a,b : nat"], "goal": "eq b O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul (S a) O) O", "a : nat"], "goal": "eq O O"}], "bg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul (S a) (S b)) O", "a,b : nat"], "goal": "eq (S b) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl in H.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul (S a) (S b)) O", "a,b : nat"], "goal": "eq (S b) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try discriminate.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (S (Init.Nat.add b (Init.Nat.mul a (S b)))) O", "a,b : nat"], "goal": "eq (S b) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma eq_minus' :\n forall a b c : nat, c <= a -> c <= b -> a - c = b - c -> a = b.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction a.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq O (Init.Nat.sub b c)), eq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "rewrite H1.", "context_before": {"fg_goals": [{"hypotheses": ["H1 : eq O (Init.Nat.sub b c)", "H0 : le c b", "H : le c O", "b,c : nat"], "goal": "eq O b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H1 : eq O (Init.Nat.sub b c)", "H0 : le c b", "H : le c O", "b,c : nat"], "goal": "eq (Init.Nat.sub b c) b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct a.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c a) (_ : le c b)\n  (_ : eq (Init.Nat.sub a c) (Init.Nat.sub b c)), \neq a b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (b c : nat) (_ : le c (S O)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub b c)), \neq (S O) b"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c O)\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub O c)), \neq (S O) O"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}, {"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S b) c)),\neq (S O) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le O (S O)) (_ : le O O)\n  (_ : eq (Init.Nat.sub (S O) O) (Init.Nat.sub O O)), \neq (S O) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S b) c)),\neq (S O) (S b)"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}, {"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le (S c) (S O)) (_ : le (S c) O)\n  (_ : eq (Init.Nat.sub (S O) (S c)) (Init.Nat.sub O (S c))),\neq (S O) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H1 : eq (Init.Nat.sub (S O) O) (Init.Nat.sub O O)", "H0 : le O O", "H : le O (S O)", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "eq (S O) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S b) c)),\neq (S O) (S b)"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}, {"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le (S c) (S O)) (_ : le (S c) O)\n  (_ : eq (Init.Nat.sub (S O) (S c)) (Init.Nat.sub O (S c))),\neq (S O) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le (S c) (S O)) (_ : le (S c) O)\n  (_ : eq (Init.Nat.sub (S O) (S c)) (Init.Nat.sub O (S c))),\neq (S O) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S b) c)),\neq (S O) (S b)"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "easy.", "context_before": {"fg_goals": [{"hypotheses": ["H1 : eq (Init.Nat.sub (S O) (S c)) (Init.Nat.sub O (S c))", "H0 : le (S c) O", "H : le (S c) (S O)", "c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "eq (S O) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S b) c)),\neq (S O) (S b)"}, {"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S b) c)),\neq (S O) (S b)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S O))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S O) c)),\neq (S O) (S O)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}, {"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S (S b)))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S (S b)) c)),\neq (S O) (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H1 : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S O) c)", "H,H0 : le c (S O)", "c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "eq (S O) (S O)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}, {"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S (S b)))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S (S b)) c)),\neq (S O) (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (c : nat) (_ : le c (S O)) (_ : le c (S (S b)))\n  (_ : eq (Init.Nat.sub (S O) c) (Init.Nat.sub (S (S b)) c)),\neq (S O) (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le O (S O)) (_ : le O (S (S b)))\n  (_ : eq (Init.Nat.sub (S O) O) (Init.Nat.sub (S (S b)) O)),\neq (S O) (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}, {"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le (S c) (S O)) (_ : le (S c) (S (S b)))\n  (_ : eq (Init.Nat.sub (S O) (S c)) (Init.Nat.sub (S (S b)) (S c))),\neq (S O) (S (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : le c O) (_ : le c b)\n  (_ : eq (Init.Nat.sub O c) (Init.Nat.sub b c)), \neq O b"], "goal": "forall (_ : le (S c) (S O)) (_ : le (S c) (S (S b)))\n  (_ : eq (Init.Nat.sub (S O) (S c)) (Init.Nat.sub (S (S b)) (S c))),\neq (S O) (S (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (b c : nat) (_ : le c (S (S a))) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub b c)),\neq (S (S a)) b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c O)\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub O c)),\neq (S (S a)) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub (S b) c)),\neq (S (S a)) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le O (S (S a))) (_ : le O O)\n  (_ : eq (Init.Nat.sub (S (S a)) O) (Init.Nat.sub O O)),\neq (S (S a)) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub (S b) c)),\neq (S (S a)) (S b)"}, {"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) O)\n  (_ : eq (Init.Nat.sub (S (S a)) (S c)) (Init.Nat.sub O (S c))),\neq (S (S a)) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "congruence.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le O (S (S a))) (_ : le O O) (_ : eq (S (S a)) O),\neq (S (S a)) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub (S b) c)),\neq (S (S a)) (S b)"}, {"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) O)\n  (_ : eq (Init.Nat.sub (S (S a)) (S c)) (Init.Nat.sub O (S c))),\neq (S (S a)) O"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) O)\n  (_ : eq (Init.Nat.sub (S (S a)) (S c)) (Init.Nat.sub O (S c))),\neq (S (S a)) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub (S b) c)),\neq (S (S a)) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) O)\n  (_ : eq match c with\n          | O => S a\n          | S l => Init.Nat.sub a l\n          end O), eq (S (S a)) O"}], "bg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub (S b) c)),\neq (S (S a)) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct c.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (c : nat) (_ : le c (S (S a))) (_ : le c (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) c) (Init.Nat.sub (S b) c)),\neq (S (S a)) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le O (S (S a))) (_ : le O (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) O) (Init.Nat.sub (S b) O)),\neq (S (S a)) (S b)"}], "bg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) (S c)) (Init.Nat.sub (S b) (S c))),\neq (S (S a)) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["b : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le O (S (S a))) (_ : le O (S b)) (_ : eq (S (S a)) (S b)),\neq (S (S a)) (S b)"}], "bg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) (S c)) (Init.Nat.sub (S b) (S c))),\neq (S (S a)) (S b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["b,c : nat", "IHa : forall (b c : nat) (_ : le c (S a)) (_ : le c b)\n  (_ : eq (Init.Nat.sub (S a) c) (Init.Nat.sub b c)), \neq (S a) b", "a : nat"], "goal": "forall (_ : le (S c) (S (S a))) (_ : le (S c) (S b))\n  (_ : eq (Init.Nat.sub (S (S a)) (S c)) (Init.Nat.sub (S b) (S c))),\neq (S (S a)) (S b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma mult_SO : forall x y : nat, x * y = 1 -> x = 1.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction x.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (y : nat) (_ : eq (Init.Nat.mul O y) (S O)), eq O (S O)"}], "bg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall (y : nat) (_ : eq (Init.Nat.mul (S x) y) (S O)), eq (S x) (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : eq (Init.Nat.mul O y) (S O)", "y : nat"], "goal": "eq O (S O)"}], "bg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall (y : nat) (_ : eq (Init.Nat.mul (S x) y) (S O)), eq (S x) (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall (y : nat) (_ : eq (Init.Nat.mul (S x) y) (S O)), eq (S x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "unfold Init.Nat.add.", "context_before": {"fg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall (y : nat) (_ : eq (Init.Nat.add y (Init.Nat.mul x y)) (S O)),\neq (S x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct y.", "context_before": {"fg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall (y : nat)\n  (_ : eq\n         ((fix add (n m : nat) {struct n} : nat :=\n             match n with\n             | O => m\n             | S p => S (add p m)\n             end) y (Init.Nat.mul x y)) (S O)), eq (S x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall _ : eq (Init.Nat.mul x O) (S O), eq (S x) (S O)"}], "bg_goals": [{"hypotheses": ["y : nat", "IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall\n  _ : eq\n        (S\n           ((fix add (n m : nat) {struct n} : nat :=\n               match n with\n               | O => m\n               | S p => S (add p m)\n               end) y (Init.Nat.mul x (S y)))) (S O), \neq (S x) (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct y.", "context_before": {"fg_goals": [{"hypotheses": ["y : nat", "IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall\n  _ : eq\n        (S\n           ((fix add (n m : nat) {struct n} : nat :=\n               match n with\n               | O => m\n               | S p => S (add p m)\n               end) y (Init.Nat.mul x (S y)))) (S O), \neq (S x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall _ : eq (S (Init.Nat.mul x (S O))) (S O), eq (S x) (S O)"}], "bg_goals": [{"hypotheses": ["y : nat", "IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall\n  _ : eq\n        (S\n           (S\n              ((fix add (n m : nat) {struct n} : nat :=\n                  match n with\n                  | O => m\n                  | S p => S (add p m)\n                  end) y (Init.Nat.mul x (S (S y)))))) \n        (S O), eq (S x) (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try discriminate.", "context_before": {"fg_goals": [{"hypotheses": ["y : nat", "IHx : forall (y : nat) (_ : eq (Init.Nat.mul x y) (S O)), eq x (S O)", "x : nat"], "goal": "forall\n  _ : eq\n        (S\n           (S\n              ((fix add (n m : nat) {struct n} : nat :=\n                  match n with\n                  | O => m\n                  | S p => S (add p m)\n                  end) y (Init.Nat.mul x (S (S y)))))) \n        (S O), eq (S x) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma power_mult :\n forall x a b : nat, power x a * power x b = power x (a + b).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x a b : nat,\neq (Init.Nat.mul (power x a) (power x b)) (power x (Init.Nat.add a b))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x a b : nat,\neq (Init.Nat.mul (power x a) (power x b)) (power x (Init.Nat.add a b))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_x_O_r : forall x q r : nat, is_div 0 x q r -> r = 0.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x q r : nat) (_ : is_div O x q r), eq r O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x q r : nat) (_ : is_div O x q r), eq r O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_x_nO : forall x y q r : nat, is_div x y q r -> y <> 0.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : is_div x y q r), not (eq y O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : is_div x y q r), not (eq y O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct q.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (y q r : nat) (_ : is_div O y q r), not (eq y O)"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct r.", "context_before": {"fg_goals": [{"hypotheses": ["y : nat"], "goal": "forall (r : nat) (_ : is_div O y O r), not (eq y O)"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}, {"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["y : nat"], "goal": "forall _ : is_div O y O O, not (eq y O)"}], "bg_goals": [{"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}, {"hypotheses": ["y,r : nat"], "goal": "forall _ : is_div O y O (S r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "inversion H.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq y O", "H : is_div O y O O", "y : nat"], "goal": "False"}], "bg_goals": [{"hypotheses": ["y,r : nat"], "goal": "forall _ : is_div O y O (S r), not (eq y O)"}, {"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H6 : eq r O", "H5 : eq q O", "H4 : eq b y", "H3 : eq a O", "H2 : eq O (Init.Nat.add (Init.Nat.mul O y) O)", "H1 : lt O y", "a,b,q,r : nat", "H0 : eq y O", "H : is_div O y O O", "y : nat"], "goal": "False"}], "bg_goals": [{"hypotheses": ["y,r : nat"], "goal": "forall _ : is_div O y O (S r), not (eq y O)"}, {"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["y,r : nat"], "goal": "forall _ : is_div O y O (S r), not (eq y O)"}], "bg_goals": [{"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "inversion H.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq y O", "H : is_div O y O (S r)", "y,r : nat"], "goal": "False"}], "bg_goals": [{"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H6 : eq r0 (S r)", "H5 : eq q O", "H4 : eq b y", "H3 : eq a O", "H2 : eq O (Init.Nat.add (Init.Nat.mul O y) (S r))", "H1 : lt (S r) y", "a,b,q,r0 : nat", "H0 : eq y O", "H : is_div O y O (S r)", "y,r : nat"], "goal": "False"}], "bg_goals": [{"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct r.", "context_before": {"fg_goals": [{"hypotheses": ["y,q : nat"], "goal": "forall (r : nat) (_ : is_div O y (S q) r), not (eq y O)"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["y,q : nat"], "goal": "forall _ : is_div O y (S q) O, not (eq y O)"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}, {"hypotheses": ["y,q,r : nat"], "goal": "forall _ : is_div O y (S q) (S r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct H.", "context_before": {"fg_goals": [{"hypotheses": ["H : is_div O y (S q) O", "y,q : nat"], "goal": "not (eq y O)"}], "bg_goals": [{"hypotheses": ["y,q,r : nat"], "goal": "forall _ : is_div O y (S q) (S r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq a (Init.Nat.add (Init.Nat.mul q0 b) r)", "H : lt r b", "q,a,b,q0,r : nat"], "goal": "not (eq b r)"}], "bg_goals": [{"hypotheses": ["y,q,r : nat"], "goal": "forall _ : is_div O y (S q) (S r), not (eq y O)"}, {"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["y,q,r : nat"], "goal": "forall _ : is_div O y (S q) (S r), not (eq y O)"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "inversion H.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq y O", "H : is_div O y (S q) (S r)", "y,q,r : nat"], "goal": "False"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H6 : eq r0 (S r)", "H5 : eq q0 (S q)", "H4 : eq b y", "H3 : eq a O", "H2 : eq O (Init.Nat.add (Init.Nat.mul (S q) y) (S r))", "H1 : lt (S r) y", "a,b,q0,r0 : nat", "H0 : eq y O", "H : is_div O y (S q) (S r)", "y,q,r : nat"], "goal": "False"}], "bg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["x : nat"], "goal": "forall (y q r : nat) (_ : is_div (S x) y q r), not (eq y O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct H.", "context_before": {"fg_goals": [{"hypotheses": ["H : is_div (S x) y q r", "x,y,q,r : nat"], "goal": "not (eq y O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq a (Init.Nat.add (Init.Nat.mul q b) r)", "H : lt r b", "x,a,b,q,r : nat"], "goal": "not (eq b O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_x_O_q : forall x q r : nat, is_div 0 x q r -> q = 0.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x q r : nat) (_ : is_div O x q r), eq q O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x q r : nat) (_ : is_div O x q r), eq q O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_pred :\n forall x y q : nat,\n 0 < x -> is_div x y q 0 -> is_div (pred x) y (pred q) (pred y).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q : nat) (_ : lt O x) (_ : is_div x y q O),\nis_div (Init.Nat.pred x) y (Init.Nat.pred q) (Init.Nat.pred y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q : nat) (_ : lt O x) (_ : is_div x y q O),\nis_div (Init.Nat.pred x) y (Init.Nat.pred q) (Init.Nat.pred y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma mult_eq_Sn : forall a b : nat, 0 < b -> a * b = b -> a = 1.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : lt O b) (_ : eq (Init.Nat.mul a b) b),\neq a (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : lt O b) (_ : eq (Init.Nat.mul a b) b),\neq a (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nTheorem simpl_mult_r : forall n m p : nat, 0 < n -> m * n = p * n -> m = p.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction n.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m p : nat) (_ : lt O O)\n  (_ : eq (Init.Nat.mul m O) (Init.Nat.mul p O)), \neq m p"}], "bg_goals": [{"hypotheses": ["IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (m p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "easy.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq (Init.Nat.mul m O) (Init.Nat.mul p O)", "H : lt O O", "m,p : nat"], "goal": "eq m p"}], "bg_goals": [{"hypotheses": ["IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (m p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction m.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (m p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul O (S n)) (Init.Nat.mul p (S n))), \neq O p"}], "bg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul (S m) (S n)) (Init.Nat.mul p (S n))),\neq (S m) p"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct p.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq (Init.Nat.mul O (S n)) (Init.Nat.mul p (S n))", "H : lt O (S n)", "p : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "eq O p"}], "bg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul (S m) (S n)) (Init.Nat.mul p (S n))),\neq (S m) p"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq (Init.Nat.mul O (S n)) (Init.Nat.mul O (S n))", "H : lt O (S n)", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "eq O O"}], "bg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul (S m) (S n)) (Init.Nat.mul p (S n))),\neq (S m) p"}, {"hypotheses": ["H0 : eq (Init.Nat.mul O (S n)) (Init.Nat.mul (S p) (S n))", "H : lt O (S n)", "p : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "eq O (S p)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try discriminate.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq (Init.Nat.mul O (S n)) (Init.Nat.mul (S p) (S n))", "H : lt O (S n)", "p : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "eq O (S p)"}], "bg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul (S m) (S n)) (Init.Nat.mul p (S n))),\neq (S m) p"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul (S m) (S n)) (Init.Nat.mul p (S n))),\neq (S m) p"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction p.", "context_before": {"fg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (p : nat) (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul p (S n))), eq (S m) p"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul O (S n))), eq (S m) O"}], "bg_goals": [{"hypotheses": ["IHp : forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul p (S n))), eq (S m) p", "p : nat", "IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul (S p) (S n))), eq (S m) (S p)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "congruence.", "context_before": {"fg_goals": [{"hypotheses": ["IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n)))) O), \neq (S m) O"}], "bg_goals": [{"hypotheses": ["IHp : forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul p (S n))), eq (S m) p", "p : nat", "IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul (S p) (S n))), eq (S m) (S p)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHp : forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul p (S n))), eq (S m) p", "p : nat", "IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul (S p) (S n))), eq (S m) (S p)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["IHp : forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (Init.Nat.mul p (S n))), eq (S m) p", "p : nat", "IHm : forall (p : nat) (_ : lt O (S n))\n  (_ : eq (Init.Nat.mul m (S n)) (Init.Nat.mul p (S n))), \neq m p", "m : nat", "IHn : forall (m p : nat) (_ : lt O n)\n  (_ : eq (Init.Nat.mul m n) (Init.Nat.mul p n)), \neq m p", "n : nat"], "goal": "forall (_ : lt O (S n))\n  (_ : eq (S (Init.Nat.add n (Init.Nat.mul m (S n))))\n         (S (Init.Nat.add n (Init.Nat.mul p (S n))))), \neq (S m) (S p)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_unic_r :\n forall a b q1 q2 r1 r2 : nat,\n is_div a b q1 r1 -> is_div a b q2 r2 -> r1 = r2.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b q1 q2 r1 r2 : nat) (_ : is_div a b q1 r1)\n  (_ : is_div a b q2 r2), eq r1 r2"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b q1 q2 r1 r2 : nat) (_ : is_div a b q1 r1)\n  (_ : is_div a b q2 r2), eq r1 r2"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_SxS :\n forall x y q r : nat,\n 0 < r -> is_div x y q r -> is_div (pred x) y q (pred r).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : lt O r) (_ : is_div x y q r),\nis_div (Init.Nat.pred x) y q (Init.Nat.pred r)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : lt O r) (_ : is_div x y q r),\nis_div (Init.Nat.pred x) y q (Init.Nat.pred r)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma mult_div_r : forall x y q r : nat, is_div (x * y) y q r -> r = 0.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : is_div (Init.Nat.mul x y) y q r), eq r O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : is_div (Init.Nat.mul x y) y q r), eq r O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma diveucl_divex :\n forall a b : nat,\n diveucl a b -> exists q : _, (exists r : _, is_div a b q r).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : diveucl a b),\nex (fun q : nat => ex (fun r : nat => is_div a b q r))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : diveucl a b),\nex (fun q : nat => ex (fun r : nat => is_div a b q r))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_unic_q :\n forall a b q1 q2 r1 r2 : nat,\n is_div a b q1 r1 -> is_div a b q2 r2 -> q1 = q2.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b q1 q2 r1 r2 : nat) (_ : is_div a b q1 r1)\n  (_ : is_div a b q2 r2), eq q1 q2"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b q1 q2 r1 r2 : nat) (_ : is_div a b q1 r1)\n  (_ : is_div a b q2 r2), eq q1 q2"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma div_ex :\n forall a b : nat, b <> 0 -> exists q : _, (exists r : _, is_div a b q r).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : not (eq b O)),\nex (fun q : nat => ex (fun r : nat => is_div a b q r))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b : nat) (_ : not (eq b O)),\nex (fun q : nat => ex (fun r : nat => is_div a b q r))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma le_plus_le : forall a b c d : nat, a <= b -> a + c = b + d -> d <= c.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c d : nat) (_ : le a b)\n  (_ : eq (Init.Nat.add a c) (Init.Nat.add b d)), \nle d c"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c d : nat) (_ : le a b)\n  (_ : eq (Init.Nat.add a c) (Init.Nat.add b d)), \nle d c"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H0 : eq (Init.Nat.add a c) (Init.Nat.add b d)", "H : le a b", "a,b,c,d : nat"], "goal": "le d c"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma mult_div_q : forall x y q r : nat, is_div (x * y) y q r -> q = x.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : is_div (Init.Nat.mul x y) y q r), eq q x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x y q r : nat) (_ : is_div (Init.Nat.mul x y) y q r), eq q x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma eq_mult : forall a b c : nat, c <> 0 -> c * a = c * b -> a = b.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : not (eq c O))\n  (_ : eq (Init.Nat.mul c a) (Init.Nat.mul c b)), \neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : not (eq c O))\n  (_ : eq (Init.Nat.mul c a) (Init.Nat.mul c b)), \neq a b"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma plus_minus_assoc : forall a b c : nat, b <= a -> a - b + c = a + c - b.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "induction a.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (b c : nat) (_ : le b O),\neq (Init.Nat.add (Init.Nat.sub O b) c)\n  (Init.Nat.sub (Init.Nat.add O c) b)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq (Init.Nat.add (Init.Nat.sub (S a) b) c)\n  (Init.Nat.sub (Init.Nat.add (S a) c) b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["H : le b O", "b,c : nat"], "goal": "eq (Init.Nat.add (Init.Nat.sub O b) c)\n  (Init.Nat.sub (Init.Nat.add O c) b)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq (Init.Nat.add (Init.Nat.sub (S a) b) c)\n  (Init.Nat.sub (Init.Nat.add (S a) c) b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intuition.", "context_before": {"fg_goals": [{"hypotheses": ["H : le O O", "c : nat"], "goal": "eq (Init.Nat.add (Init.Nat.sub O O) c)\n  (Init.Nat.sub (Init.Nat.add O c) O)"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq (Init.Nat.add (Init.Nat.sub (S a) b) c)\n  (Init.Nat.sub (Init.Nat.add (S a) c) b)"}, {"hypotheses": ["H : le (S b) O", "b,c : nat"], "goal": "eq (Init.Nat.add (Init.Nat.sub O (S b)) c)\n  (Init.Nat.sub (Init.Nat.add O c) (S b))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S b) O", "b,c : nat"], "goal": "eq (Init.Nat.add (Init.Nat.sub O (S b)) c)\n  (Init.Nat.sub (Init.Nat.add O c) (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq (Init.Nat.add (Init.Nat.sub (S a) b) c)\n  (Init.Nat.sub (Init.Nat.add (S a) c) b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try easy.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S b) O", "b,c : nat"], "goal": "eq c (Init.Nat.sub c (S b))"}], "bg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq (Init.Nat.add (Init.Nat.sub (S a) b) c)\n  (Init.Nat.sub (Init.Nat.add (S a) c) b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq (Init.Nat.add (Init.Nat.sub (S a) b) c)\n  (Init.Nat.sub (Init.Nat.add (S a) c) b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": ["IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "forall (b c : nat) (_ : le b (S a)),\neq\n  (Init.Nat.add match b with\n                | O => S a\n                | S l => Init.Nat.sub a l\n                end c)\n  match b with\n  | O => S (Init.Nat.add a c)\n  | S l => Init.Nat.sub (Init.Nat.add a c) l\n  end"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct b.", "context_before": {"fg_goals": [{"hypotheses": ["H : le b (S a)", "b,c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "eq\n  (Init.Nat.add match b with\n                | O => S a\n                | S l => Init.Nat.sub a l\n                end c)\n  match b with\n  | O => S (Init.Nat.add a c)\n  | S l => Init.Nat.sub (Init.Nat.add a c) l\n  end"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : le O (S a)", "c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "eq (Init.Nat.add (S a) c) (S (Init.Nat.add a c))"}], "bg_goals": [{"hypotheses": ["H : le (S b) (S a)", "b,c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "eq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "rewrite IHa.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S b) (S a)", "b,c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "eq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S b) (S a)", "b,c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "eq (Init.Nat.sub (Init.Nat.add a c) b)\n  (Init.Nat.sub (Init.Nat.add a c) b)"}], "bg_goals": [{"hypotheses": ["H : le (S b) (S a)", "b,c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "le b a"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "omega.", "context_before": {"fg_goals": [{"hypotheses": ["H : le (S b) (S a)", "b,c : nat", "IHa : forall (b c : nat) (_ : le b a),\neq (Init.Nat.add (Init.Nat.sub a b) c)\n  (Init.Nat.sub (Init.Nat.add a c) b)", "a : nat"], "goal": "le b a"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["MiscRsa.v", "MiscRsa.", " \nLemma quot_eq :\n forall a b c q1 r1 q2 r2 : nat,\n a = b -> is_div a c q1 r1 -> is_div b c q2 r2 -> q1 = q2.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c q1 r1 q2 r2 : nat) (_ : eq a b) (_ : is_div a c q1 r1)\n  (_ : is_div b c q2 r2), eq q1 q2"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (a b c q1 r1 q2 r2 : nat) (_ : eq a b) (_ : is_div a c q1 r1)\n  (_ : is_div b c q2 r2), eq q1 q2"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
