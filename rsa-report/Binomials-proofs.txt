[["Binomials.v", "Binomials.", "\nLemma sum_nm_i :\n forall (m n : nat) (f : nat -> nat),\n sum_nm (S n) m f = f m + sum_nm n (S m) f.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f : forall _ : nat, nat),\neq (sum_nm (S n) m f) (Init.Nat.add (f m) (sum_nm n (S m) f))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f : forall _ : nat, nat),\neq (sum_nm (S n) m f) (Init.Nat.add (f m) (sum_nm n (S m) f))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["f : forall _ : nat, nat", "m,n : nat"], "goal": "eq (sum_nm (S n) m f) (Init.Nat.add (f m) (sum_nm n (S m) f))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma sum_nm_ext :\n forall (m n : nat) (f g : nat -> nat),\n (forall x : nat, x <= n -> f (m + x) = g (m + x)) ->\n sum_nm n m f = sum_nm n m g.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f g : forall _ : nat, nat)\n  (_ : forall (x : nat) (_ : le x n),\n       eq (f (Init.Nat.add m x)) (g (Init.Nat.add m x))),\neq (sum_nm n m f) (sum_nm n m g)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f g : forall _ : nat, nat)\n  (_ : forall (x : nat) (_ : le x n),\n       eq (f (Init.Nat.add m x)) (g (Init.Nat.add m x))),\neq (sum_nm n m f) (sum_nm n m g)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma sum_nm_add :\n forall (m n : nat) (f g : nat -> nat),\n sum_nm n m f + sum_nm n m g = sum_nm n m (fun i : nat => f i + g i).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f g : forall _ : nat, nat),\neq (Init.Nat.add (sum_nm n m f) (sum_nm n m g))\n  (sum_nm n m (fun i : nat => Init.Nat.add (f i) (g i)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f g : forall _ : nat, nat),\neq (Init.Nat.add (sum_nm n m f) (sum_nm n m g))\n  (sum_nm n m (fun i : nat => Init.Nat.add (f i) (g i)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma inv_sum_nm :\n forall (P : nat -> Prop) (i n : nat) (f : nat -> nat),\n (forall a b : nat, P a -> P b -> P (a + b)) ->\n (forall x : nat, x <= n -> P (f (i + x))) -> P (sum_nm n i f).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (P : forall _ : nat, Prop) (i n : nat) (f : forall _ : nat, nat)\n  (_ : forall (a b : nat) (_ : P a) (_ : P b), P (Init.Nat.add a b))\n  (_ : forall (x : nat) (_ : le x n), P (f (Init.Nat.add i x))),\nP (sum_nm n i f)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (P : forall _ : nat, Prop) (i n : nat) (f : forall _ : nat, nat)\n  (_ : forall (a b : nat) (_ : P a) (_ : P b), P (Init.Nat.add a b))\n  (_ : forall (x : nat) (_ : le x n), P (f (Init.Nat.add i x))),\nP (sum_nm n i f)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma binomial_def1 : forall n : nat, binomial n 0 = 1.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (binomial n O) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (binomial n O) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct n.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (binomial n O) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq (binomial O O) (S O)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (binomial (S n) O) (S O)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (binomial (S n) O) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma sum_nm_f :\n forall (m n : nat) (f : nat -> nat),\n sum_nm (S n) m f = sum_nm n m f + f (m + S n).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f : forall _ : nat, nat),\neq (sum_nm (S n) m f)\n  (Init.Nat.add (sum_nm n m f) (f (Init.Nat.add m (S n))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n : nat) (f : forall _ : nat, nat),\neq (sum_nm (S n) m f)\n  (Init.Nat.add (sum_nm n m f) (f (Init.Nat.add m (S n))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma sum_nm_times :\n forall (m n x : nat) (f : nat -> nat),\n x * sum_nm n m f = sum_nm n m (fun i : nat => x * f i).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n x : nat) (f : forall _ : nat, nat),\neq (Init.Nat.mul x (sum_nm n m f))\n  (sum_nm n m (fun i : nat => Init.Nat.mul x (f i)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (m n x : nat) (f : forall _ : nat, nat),\neq (Init.Nat.mul x (sum_nm n m f))\n  (sum_nm n m (fun i : nat => Init.Nat.mul x (f i)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma binomial_def4 :\n forall n k : nat,\n k < n -> binomial (S n) (S k) = binomial n (S k) + binomial n k.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n k : nat) (_ : lt k n),\neq (binomial (S n) (S k))\n  (Init.Nat.add (binomial n (S k)) (binomial n k))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n k : nat) (_ : lt k n),\neq (binomial (S n) (S k))\n  (Init.Nat.add (binomial n (S k)) (binomial n k))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt k n", "n,k : nat"], "goal": "eq (binomial (S n) (S k))\n  (Init.Nat.add (binomial n (S k)) (binomial n k))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "f_equal.", "context_before": {"fg_goals": [{"hypotheses": ["H : lt k n", "n,k : nat"], "goal": "eq (Init.Nat.add (binomial n (S k)) (binomial n k))\n  (Init.Nat.add (binomial n (S k)) (binomial n k))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma binomial_def3 : forall n : nat, binomial n n = 1.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (binomial n n) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (binomial n n) (S O)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma t_sum_Svars :\n forall (n k : nat) (f : nat -> nat),\n sum_nm k n f = sum_nm k (S n) (fun i : nat => f (pred i)).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n k : nat) (f : forall _ : nat, nat),\neq (sum_nm k n f) (sum_nm k (S n) (fun i : nat => f (Init.Nat.pred i)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n k : nat) (f : forall _ : nat, nat),\neq (sum_nm k n f) (sum_nm k (S n) (fun i : nat => f (Init.Nat.pred i)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma binomial_fact :\n forall m n : nat,\n binomial (n + m) n * (factorial n * factorial m) = factorial (n + m).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall m n : nat,\neq\n  (Init.Nat.mul (binomial (Init.Nat.add n m) n)\n     (Init.Nat.mul (factorial n) (factorial m)))\n  (factorial (Init.Nat.add n m))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall m n : nat,\neq\n  (Init.Nat.mul (binomial (Init.Nat.add n m) n)\n     (Init.Nat.mul (factorial n) (factorial m)))\n  (factorial (Init.Nat.add n m))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nTheorem exp_Pascal :\n forall a b n : nat,\n power (a + b) n =\n sum_nm n 0 (fun k : nat => binomial n k * (power a (n - k) * power b k)).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a b n : nat,\neq (power (Init.Nat.add a b) n)\n  (sum_nm n O\n     (fun k : nat =>\n      Init.Nat.mul (binomial n k)\n        (Init.Nat.mul (power a (Init.Nat.sub n k)) (power b k))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall a b n : nat,\neq (power (Init.Nat.add a b) n)\n  (sum_nm n O\n     (fun k : nat =>\n      Init.Nat.mul (binomial n k)\n        (Init.Nat.mul (power a (Init.Nat.sub n k)) (power b k))))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Binomials.v", "Binomials.", "\nLemma binomial_def2 : forall n m : nat, n < m -> binomial n m = 0.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n m : nat) (_ : lt n m), eq (binomial n m) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n m : nat) (_ : lt n m), eq (binomial n m) O"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
