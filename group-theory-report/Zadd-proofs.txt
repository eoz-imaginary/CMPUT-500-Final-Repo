[["Z/Zadd.v", "Zadd.", "\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y. "], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall y : Z, eq (addZ OZ y) y"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall y : Z, eq (addZ OZ y) y"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z"], "goal": "eq (addZ OZ y) y"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall y : Z, eq (addZ (pos O) y) (succZ y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall y : Z, eq (addZ (pos O) y) (succZ y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct y.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z"], "goal": "eq (addZ (pos O) y) (succZ y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq (addZ (pos O) OZ) (succZ OZ)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (pos O) (pos n)) (succZ (pos n))"}, {"hypotheses": ["n : nat"], "goal": "eq (addZ (pos O) (neg n)) (succZ (neg n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "reflexivity.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (pos O) (pos n)) (succZ (pos n))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (pos O) (neg n)) (succZ (neg n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "reflexivity.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (pos O) (neg n)) (succZ (neg n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n1 : nat) (y : Z),\neq (addZ (pos (S n1)) y) (succZ (addZ (pos n1) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n1 : nat) (y : Z),\neq (addZ (pos (S n1)) y) (succZ (addZ (pos n1) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "easy.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z", "n1 : nat"], "goal": "eq (addZ (pos (S n1)) y) (succZ (addZ (pos n1) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall y : Z, eq (addZ (neg O) y) (predZ y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall y : Z, eq (addZ (neg O) y) (predZ y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct y.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z"], "goal": "eq (addZ (neg O) y) (predZ y)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq (addZ (neg O) OZ) (predZ OZ)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (neg O) (pos n)) (predZ (pos n))"}, {"hypotheses": ["n : nat"], "goal": "eq (addZ (neg O) (neg n)) (predZ (neg n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "reflexivity.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (neg O) (pos n)) (predZ (pos n))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (neg O) (neg n)) (predZ (neg n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "reflexivity.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (addZ (neg O) (neg n)) (predZ (neg n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n1 : nat) (y : Z),\neq (addZ (neg (S n1)) y) (predZ (addZ (neg n1) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n1 : nat) (y : Z),\neq (addZ (neg (S n1)) y) (predZ (addZ (neg n1) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "easy.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z", "n1 : nat"], "goal": "eq (addZ (neg (S n1)) y) (predZ (addZ (neg n1) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x : nat) (y : Z),\neq (addZ (pos (S x)) y) (succZ (addZ (pos x) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x : nat) (y : Z),\neq (addZ (pos (S x)) y) (succZ (addZ (pos x) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "apply addZ_eq3.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z", "x : nat"], "goal": "eq (addZ (pos (S x)) y) (succZ (addZ (pos x) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x : nat) (y : Z),\neq (addZ (neg (S x)) y) (predZ (addZ (neg x) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x : nat) (y : Z),\neq (addZ (neg (S x)) y) (predZ (addZ (neg x) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "apply addZ_eq5.", "context_before": {"fg_goals": [{"hypotheses": ["y : Z", "x : nat"], "goal": "eq (addZ (neg (S x)) y) (predZ (addZ (neg x) y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ (predZ x) y) (predZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ (predZ x) y) (predZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (addZ x OZ) x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (addZ x OZ) x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (addZ x IZ) (succZ x)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (addZ x IZ) (succZ x)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\n\n\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ (succZ x) y) (succZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ (succZ x) y) (succZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ x (predZ y)) (predZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ x (predZ y)) (predZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (addZ x (neg O)) (predZ x)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (addZ x (neg O)) (predZ x)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nTheorem addZ_commutativity : commutative Z addZ.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "commutative Z addZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "commutative Z addZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "neutral Z IdZ addZ OZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "red.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "neutral Z IdZ addZ OZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "split.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "and (IdZ OZ)\n  (forall (x : Z) (_ : IdZ x),\n   and (eq (addZ x OZ) x) (eq (addZ OZ x) x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "easy.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "IdZ OZ"}], "bg_goals": [{"hypotheses": [], "goal": "forall (x : Z) (_ : IdZ x), and (eq (addZ x OZ) x) (eq (addZ OZ x) x)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (x : Z) (_ : IdZ x), and (eq (addZ x OZ) x) (eq (addZ OZ x) x)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "split.", "context_before": {"fg_goals": [{"hypotheses": ["H : IdZ x", "x : Z"], "goal": "and (eq (addZ x OZ) x) (eq (addZ OZ x) x)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "rewrite add_OZ.", "context_before": {"fg_goals": [{"hypotheses": ["H : IdZ x", "x : Z"], "goal": "eq (addZ x OZ) x"}], "bg_goals": [{"hypotheses": ["H : IdZ x", "x : Z"], "goal": "eq (addZ OZ x) x"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : IdZ x", "x : Z"], "goal": "eq x x"}], "bg_goals": [{"hypotheses": ["H : IdZ x", "x : Z"], "goal": "eq (addZ OZ x) x"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["H : IdZ x", "x : Z"], "goal": "eq (addZ OZ x) x"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (oppZ (succZ x)) (predZ (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (oppZ (succZ x)) (predZ (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "unfold oppZ.", "context_before": {"fg_goals": [{"hypotheses": ["x : Z"], "goal": "eq (oppZ (succZ x)) (predZ (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": ["x : Z"], "goal": "eq match succZ x with\n   | OZ => OZ\n   | pos n => neg n\n   | neg n => pos n\n   end\n  (predZ match x with\n         | OZ => OZ\n         | pos n => neg n\n         | neg n => pos n\n         end)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "reflexivity.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq match succZ OZ with\n   | OZ => OZ\n   | pos n => neg n\n   | neg n => pos n\n   end (predZ OZ)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match succZ (pos n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (predZ (neg n))"}, {"hypotheses": ["n : nat"], "goal": "eq\n  match succZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (predZ (pos n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match succZ (pos n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (predZ (neg n))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match succZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (predZ (pos n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match succZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (predZ (pos n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct n.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match match n with\n        | O => OZ\n        | S m => neg m\n        end with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end match n with\n      | O => OZ\n      | S m => pos m\n      end"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq OZ OZ"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (pos n) (pos n)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (pos n) (pos n)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (oppZ (predZ x)) (succZ (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, eq (oppZ (predZ x)) (succZ (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "unfold oppZ.", "context_before": {"fg_goals": [{"hypotheses": ["x : Z"], "goal": "eq (oppZ (predZ x)) (succZ (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": ["x : Z"], "goal": "eq match predZ x with\n   | OZ => OZ\n   | pos n => neg n\n   | neg n => pos n\n   end\n  (succZ match x with\n         | OZ => OZ\n         | pos n => neg n\n         | neg n => pos n\n         end)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "reflexivity.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq match predZ OZ with\n   | OZ => OZ\n   | pos n => neg n\n   | neg n => pos n\n   end (succZ OZ)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (pos n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (neg n))"}, {"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (pos n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (pos n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (neg n))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (pos n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct n.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match match n with\n        | O => OZ\n        | S m => pos m\n        end with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end match n with\n      | O => OZ\n      | S m => neg m\n      end"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (pos n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "eq OZ OZ"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (pos n))"}, {"hypotheses": ["n : nat"], "goal": "eq (neg n) (neg n)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (neg n) (neg n)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (pos n))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq\n  match predZ (neg n) with\n  | OZ => OZ\n  | pos n => neg n\n  | neg n => pos n\n  end (succZ (pos n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nTheorem addZ_associativity : associative Z addZ.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "associative Z addZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "associative Z addZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (addZ (pos n) (neg n)) OZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (addZ (pos n) (neg n)) OZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n"], {"status": "FAILURE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (addZ (neg n) (pos n)) OZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat, eq (addZ (neg n) (pos n)) OZ"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ x (succZ y)) (succZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x y : Z, eq (addZ x (succZ y)) (succZ (addZ x y))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nTheorem abs_eq_or_oppZ : forall x : Z, {absZ x = x} + {absZ x = oppZ x}.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, sumbool (eq (absZ x) x) (eq (absZ x) (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall x : Z, sumbool (eq (absZ x) x) (eq (absZ x) (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "unfold absZ.", "context_before": {"fg_goals": [{"hypotheses": ["x : Z"], "goal": "sumbool (eq (absZ x) x) (eq (absZ x) (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "destruct x.", "context_before": {"fg_goals": [{"hypotheses": ["x : Z"], "goal": "sumbool (eq match x with\n            | OZ => OZ\n            | pos n | neg n => pos n\n            end x)\n  (eq match x with\n      | OZ => OZ\n      | pos n | neg n => pos n\n      end (oppZ x))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "sumbool (eq OZ OZ) (eq OZ (oppZ OZ))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (pos n)) (eq (pos n) (oppZ (pos n)))"}, {"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (neg n)) (eq (pos n) (oppZ (neg n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "sumbool (eq OZ OZ) (eq OZ OZ)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (pos n)) (eq (pos n) (oppZ (pos n)))"}, {"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (neg n)) (eq (pos n) (oppZ (neg n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "simpl.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (pos n)) (eq (pos n) (oppZ (pos n)))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (neg n)) (eq (pos n) (oppZ (neg n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "try constructor.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (pos n)) (eq (pos n) (neg n))"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (neg n)) (eq (pos n) (oppZ (neg n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (pos n) (pos n)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (neg n)) (eq (pos n) (oppZ (neg n)))"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "sumbool (eq (pos n) (neg n)) (eq (pos n) (oppZ (neg n)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_opp_pos_negZ :\n forall n : nat, oppZ (pos n) = neg n /\\ oppZ (neg n) = pos n.\n"], {"status": "SUCCESS", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat,\nand (eq (oppZ (pos n)) (neg n)) (eq (oppZ (neg n)) (pos n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "intros.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n : nat,\nand (eq (oppZ (pos n)) (neg n)) (eq (oppZ (neg n)) (pos n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "split.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "and (eq (oppZ (pos n)) (neg n)) (eq (oppZ (neg n)) (pos n))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (oppZ (pos n)) (neg n)"}], "bg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (oppZ (neg n)) (pos n)"}], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "eauto.", "context_before": {"fg_goals": [{"hypotheses": ["n : nat"], "goal": "eq (oppZ (neg n)) (pos n)"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Qed.", "context_before": {"fg_goals": [], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_pos_neg_posZ :\n forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n1 n2 : nat) (_ : lt n2 n1),\neq (addZ (pos n1) (neg n2)) (pos (Init.Nat.sub n1 (S n2)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall (n1 n2 : nat) (_ : lt n2 n1),\neq (addZ (pos n1) (neg n2)) (pos (Init.Nat.sub n1 (S n2)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_pos_posZ :\n forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n m : nat,\neq (addZ (pos n) (pos m)) (pos (S (Init.Nat.add n m)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n m : nat,\neq (addZ (pos n) (pos m)) (pos (S (Init.Nat.add n m)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
[["Z/Zadd.v", "Zadd.", "\nLemma tech_add_neg_negZ :\n forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\n"], {"status": "INCOMPLETE", "commands": [{"tactic": "Proof.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n m : nat,\neq (addZ (neg n) (neg m)) (neg (S (Init.Nat.add n m)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}, {"tactic": "Admitted.", "context_before": {"fg_goals": [{"hypotheses": [], "goal": "forall n m : nat,\neq (addZ (neg n) (neg m)) (neg (S (Init.Nat.add n m)))"}], "bg_goals": [], "shelved_goals": [], "given_up_goals": []}}]}]
